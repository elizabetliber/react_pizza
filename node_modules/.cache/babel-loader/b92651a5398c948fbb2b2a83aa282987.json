{"ast":null,"code":"'use strict';\n\nfunction getSocketServerImplementation(options) {\n  let ServerImplementation;\n  let serverImplFound = true;\n\n  switch (typeof options.transportMode.server) {\n    case 'string':\n      // could be 'sockjs', in the future 'ws', or a path that should be required\n      if (options.transportMode.server === 'sockjs') {\n        ServerImplementation = require('../servers/SockJSServer');\n      } else if (options.transportMode.server === 'ws') {\n        ServerImplementation = require('../servers/WebsocketServer');\n      } else {\n        try {\n          // eslint-disable-next-line import/no-dynamic-require\n          ServerImplementation = require(options.transportMode.server);\n        } catch (e) {\n          serverImplFound = false;\n        }\n      }\n\n      break;\n\n    case 'function':\n      // potentially do more checks here to confirm that the user implemented this properlly\n      // since errors could be difficult to understand\n      ServerImplementation = options.transportMode.server;\n      break;\n\n    default:\n      serverImplFound = false;\n  }\n\n  if (!serverImplFound) {\n    throw new Error(\"transportMode.server must be a string denoting a default implementation (e.g. 'sockjs', 'ws'), a full path to \" + 'a JS file which exports a class extending BaseServer (webpack-dev-server/lib/servers/BaseServer) ' + 'via require.resolve(...), or the class itself which extends BaseServer');\n  }\n\n  return ServerImplementation;\n}\n\nmodule.exports = getSocketServerImplementation;","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/webpack-dev-server/lib/utils/getSocketServerImplementation.js"],"names":["getSocketServerImplementation","options","ServerImplementation","serverImplFound","transportMode","server","require","e","Error","module","exports"],"mappings":"AAAA;;AAEA,SAASA,6BAAT,CAAuCC,OAAvC,EAAgD;AAC9C,MAAIC,oBAAJ;AACA,MAAIC,eAAe,GAAG,IAAtB;;AACA,UAAQ,OAAOF,OAAO,CAACG,aAAR,CAAsBC,MAArC;AACE,SAAK,QAAL;AACE;AACA,UAAIJ,OAAO,CAACG,aAAR,CAAsBC,MAAtB,KAAiC,QAArC,EAA+C;AAC7CH,QAAAA,oBAAoB,GAAGI,OAAO,CAAC,yBAAD,CAA9B;AACD,OAFD,MAEO,IAAIL,OAAO,CAACG,aAAR,CAAsBC,MAAtB,KAAiC,IAArC,EAA2C;AAChDH,QAAAA,oBAAoB,GAAGI,OAAO,CAAC,4BAAD,CAA9B;AACD,OAFM,MAEA;AACL,YAAI;AACF;AACAJ,UAAAA,oBAAoB,GAAGI,OAAO,CAACL,OAAO,CAACG,aAAR,CAAsBC,MAAvB,CAA9B;AACD,SAHD,CAGE,OAAOE,CAAP,EAAU;AACVJ,UAAAA,eAAe,GAAG,KAAlB;AACD;AACF;;AACD;;AACF,SAAK,UAAL;AACE;AACA;AACAD,MAAAA,oBAAoB,GAAGD,OAAO,CAACG,aAAR,CAAsBC,MAA7C;AACA;;AACF;AACEF,MAAAA,eAAe,GAAG,KAAlB;AAtBJ;;AAyBA,MAAI,CAACA,eAAL,EAAsB;AACpB,UAAM,IAAIK,KAAJ,CACJ,mHACE,mGADF,GAEE,wEAHE,CAAN;AAKD;;AAED,SAAON,oBAAP;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiBV,6BAAjB","sourcesContent":["'use strict';\n\nfunction getSocketServerImplementation(options) {\n  let ServerImplementation;\n  let serverImplFound = true;\n  switch (typeof options.transportMode.server) {\n    case 'string':\n      // could be 'sockjs', in the future 'ws', or a path that should be required\n      if (options.transportMode.server === 'sockjs') {\n        ServerImplementation = require('../servers/SockJSServer');\n      } else if (options.transportMode.server === 'ws') {\n        ServerImplementation = require('../servers/WebsocketServer');\n      } else {\n        try {\n          // eslint-disable-next-line import/no-dynamic-require\n          ServerImplementation = require(options.transportMode.server);\n        } catch (e) {\n          serverImplFound = false;\n        }\n      }\n      break;\n    case 'function':\n      // potentially do more checks here to confirm that the user implemented this properlly\n      // since errors could be difficult to understand\n      ServerImplementation = options.transportMode.server;\n      break;\n    default:\n      serverImplFound = false;\n  }\n\n  if (!serverImplFound) {\n    throw new Error(\n      \"transportMode.server must be a string denoting a default implementation (e.g. 'sockjs', 'ws'), a full path to \" +\n        'a JS file which exports a class extending BaseServer (webpack-dev-server/lib/servers/BaseServer) ' +\n        'via require.resolve(...), or the class itself which extends BaseServer'\n    );\n  }\n\n  return ServerImplementation;\n}\n\nmodule.exports = getSocketServerImplementation;\n"]},"metadata":{},"sourceType":"script"}