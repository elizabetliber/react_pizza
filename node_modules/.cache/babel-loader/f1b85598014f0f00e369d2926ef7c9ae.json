{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n/*globals __webpack_hash__ */\nif (module.hot) {\n  var lastHash;\n\n  var upToDate = function upToDate() {\n    return lastHash.indexOf(__webpack_hash__) >= 0;\n  };\n\n  var log = require(\"./log\");\n\n  var check = function check() {\n    module.hot.check().then(function (updatedModules) {\n      if (!updatedModules) {\n        log(\"warning\", \"[HMR] Cannot find update. Need to do a full reload!\");\n        log(\"warning\", \"[HMR] (Probably because of restarting the webpack-dev-server)\");\n        return;\n      }\n\n      return module.hot.apply({\n        ignoreUnaccepted: true,\n        ignoreDeclined: true,\n        ignoreErrored: true,\n        onUnaccepted: function (data) {\n          log(\"warning\", \"Ignored an update to unaccepted module \" + data.chain.join(\" -> \"));\n        },\n        onDeclined: function (data) {\n          log(\"warning\", \"Ignored an update to declined module \" + data.chain.join(\" -> \"));\n        },\n        onErrored: function (data) {\n          log(\"error\", data.error);\n          log(\"warning\", \"Ignored an error while updating module \" + data.moduleId + \" (\" + data.type + \")\");\n        }\n      }).then(function (renewedModules) {\n        if (!upToDate()) {\n          check();\n        }\n\n        require(\"./log-apply-result\")(updatedModules, renewedModules);\n\n        if (upToDate()) {\n          log(\"info\", \"[HMR] App is up to date.\");\n        }\n      });\n    }).catch(function (err) {\n      var status = module.hot.status();\n\n      if ([\"abort\", \"fail\"].indexOf(status) >= 0) {\n        log(\"warning\", \"[HMR] Cannot check for update. Need to do a full reload!\");\n        log(\"warning\", \"[HMR] \" + log.formatError(err));\n      } else {\n        log(\"warning\", \"[HMR] Update check failed: \" + log.formatError(err));\n      }\n    });\n  };\n\n  var hotEmitter = require(\"./emitter\");\n\n  hotEmitter.on(\"webpackHotUpdate\", function (currentHash) {\n    lastHash = currentHash;\n\n    if (!upToDate()) {\n      var status = module.hot.status();\n\n      if (status === \"idle\") {\n        log(\"info\", \"[HMR] Checking for updates on the server...\");\n        check();\n      } else if ([\"abort\", \"fail\"].indexOf(status) >= 0) {\n        log(\"warning\", \"[HMR] Cannot apply update as a previous update \" + status + \"ed. Need to do a full reload!\");\n      }\n    }\n  });\n  log(\"info\", \"[HMR] Waiting for update signal from WDS...\");\n} else {\n  throw new Error(\"[HMR] Hot Module Replacement is disabled.\");\n}","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/webpack/hot/only-dev-server.js"],"names":["module","hot","lastHash","upToDate","indexOf","__webpack_hash__","log","require","check","then","updatedModules","apply","ignoreUnaccepted","ignoreDeclined","ignoreErrored","onUnaccepted","data","chain","join","onDeclined","onErrored","error","moduleId","type","renewedModules","catch","err","status","formatError","hotEmitter","on","currentHash","Error"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n/*globals __webpack_hash__ */\nif (module.hot) {\n\tvar lastHash;\n\tvar upToDate = function upToDate() {\n\t\treturn lastHash.indexOf(__webpack_hash__) >= 0;\n\t};\n\tvar log = require(\"./log\");\n\tvar check = function check() {\n\t\tmodule.hot\n\t\t\t.check()\n\t\t\t.then(function(updatedModules) {\n\t\t\t\tif (!updatedModules) {\n\t\t\t\t\tlog(\"warning\", \"[HMR] Cannot find update. Need to do a full reload!\");\n\t\t\t\t\tlog(\n\t\t\t\t\t\t\"warning\",\n\t\t\t\t\t\t\"[HMR] (Probably because of restarting the webpack-dev-server)\"\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn module.hot\n\t\t\t\t\t.apply({\n\t\t\t\t\t\tignoreUnaccepted: true,\n\t\t\t\t\t\tignoreDeclined: true,\n\t\t\t\t\t\tignoreErrored: true,\n\t\t\t\t\t\tonUnaccepted: function(data) {\n\t\t\t\t\t\t\tlog(\n\t\t\t\t\t\t\t\t\"warning\",\n\t\t\t\t\t\t\t\t\"Ignored an update to unaccepted module \" +\n\t\t\t\t\t\t\t\t\tdata.chain.join(\" -> \")\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonDeclined: function(data) {\n\t\t\t\t\t\t\tlog(\n\t\t\t\t\t\t\t\t\"warning\",\n\t\t\t\t\t\t\t\t\"Ignored an update to declined module \" +\n\t\t\t\t\t\t\t\t\tdata.chain.join(\" -> \")\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonErrored: function(data) {\n\t\t\t\t\t\t\tlog(\"error\", data.error);\n\t\t\t\t\t\t\tlog(\n\t\t\t\t\t\t\t\t\"warning\",\n\t\t\t\t\t\t\t\t\"Ignored an error while updating module \" +\n\t\t\t\t\t\t\t\t\tdata.moduleId +\n\t\t\t\t\t\t\t\t\t\" (\" +\n\t\t\t\t\t\t\t\t\tdata.type +\n\t\t\t\t\t\t\t\t\t\")\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.then(function(renewedModules) {\n\t\t\t\t\t\tif (!upToDate()) {\n\t\t\t\t\t\t\tcheck();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trequire(\"./log-apply-result\")(updatedModules, renewedModules);\n\n\t\t\t\t\t\tif (upToDate()) {\n\t\t\t\t\t\t\tlog(\"info\", \"[HMR] App is up to date.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(function(err) {\n\t\t\t\tvar status = module.hot.status();\n\t\t\t\tif ([\"abort\", \"fail\"].indexOf(status) >= 0) {\n\t\t\t\t\tlog(\n\t\t\t\t\t\t\"warning\",\n\t\t\t\t\t\t\"[HMR] Cannot check for update. Need to do a full reload!\"\n\t\t\t\t\t);\n\t\t\t\t\tlog(\"warning\", \"[HMR] \" + log.formatError(err));\n\t\t\t\t} else {\n\t\t\t\t\tlog(\"warning\", \"[HMR] Update check failed: \" + log.formatError(err));\n\t\t\t\t}\n\t\t\t});\n\t};\n\tvar hotEmitter = require(\"./emitter\");\n\thotEmitter.on(\"webpackHotUpdate\", function(currentHash) {\n\t\tlastHash = currentHash;\n\t\tif (!upToDate()) {\n\t\t\tvar status = module.hot.status();\n\t\t\tif (status === \"idle\") {\n\t\t\t\tlog(\"info\", \"[HMR] Checking for updates on the server...\");\n\t\t\t\tcheck();\n\t\t\t} else if ([\"abort\", \"fail\"].indexOf(status) >= 0) {\n\t\t\t\tlog(\n\t\t\t\t\t\"warning\",\n\t\t\t\t\t\"[HMR] Cannot apply update as a previous update \" +\n\t\t\t\t\t\tstatus +\n\t\t\t\t\t\t\"ed. Need to do a full reload!\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t});\n\tlog(\"info\", \"[HMR] Waiting for update signal from WDS...\");\n} else {\n\tthrow new Error(\"[HMR] Hot Module Replacement is disabled.\");\n}\n"]},"metadata":{},"sourceType":"script"}