{"ast":null,"code":"\"use strict\";\n\nconst net = require(\"net\");\n\nconst execa = require(\"execa\");\n\nconst dests = [\"default\", \"0.0.0.0\", \"0.0.0.0/0\", \"::\", \"::/0\"];\nconst args = {\n  v4: [\"-rn\", \"-f\", \"inet\"],\n  v6: [\"-rn\", \"-f\", \"inet6\"]\n};\n\nconst parse = stdout => {\n  let result;\n  (stdout || \"\").trim().split(\"\\n\").some(line => {\n    const results = line.split(/ +/) || [];\n    const target = results[0];\n    const gateway = results[1];\n    const iface = results[3];\n\n    if (dests.indexOf(target) !== -1 && gateway && net.isIP(gateway)) {\n      result = {\n        gateway,\n        interface: iface ? iface : null\n      };\n      return true;\n    }\n  });\n\n  if (!result) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  return result;\n};\n\nconst promise = family => {\n  return execa.stdout(\"netstat\", args[family]).then(stdout => {\n    return parse(stdout);\n  });\n};\n\nconst sync = family => {\n  const result = execa.sync(\"netstat\", args[family]);\n  return parse(result.stdout);\n};\n\nmodule.exports.v4 = () => promise(\"v4\");\n\nmodule.exports.v6 = () => promise(\"v6\");\n\nmodule.exports.v4.sync = () => sync(\"v4\");\n\nmodule.exports.v6.sync = () => sync(\"v6\");","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/default-gateway/freebsd.js"],"names":["net","require","execa","dests","args","v4","v6","parse","stdout","result","trim","split","some","line","results","target","gateway","iface","indexOf","isIP","interface","Error","promise","family","then","sync","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,KAAK,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,WAAvB,EAAoC,IAApC,EAA0C,MAA1C,CAAd;AAEA,MAAMC,IAAI,GAAG;AACXC,EAAAA,EAAE,EAAE,CAAC,KAAD,EAAQ,IAAR,EAAc,MAAd,CADO;AAEXC,EAAAA,EAAE,EAAE,CAAC,KAAD,EAAQ,IAAR,EAAc,OAAd;AAFO,CAAb;;AAKA,MAAMC,KAAK,GAAGC,MAAM,IAAI;AACtB,MAAIC,MAAJ;AAEA,GAACD,MAAM,IAAI,EAAX,EAAeE,IAAf,GAAsBC,KAAtB,CAA4B,IAA5B,EAAkCC,IAAlC,CAAuCC,IAAI,IAAI;AAC7C,UAAMC,OAAO,GAAGD,IAAI,CAACF,KAAL,CAAW,IAAX,KAAoB,EAApC;AACA,UAAMI,MAAM,GAAGD,OAAO,CAAC,CAAD,CAAtB;AACA,UAAME,OAAO,GAAGF,OAAO,CAAC,CAAD,CAAvB;AACA,UAAMG,KAAK,GAAGH,OAAO,CAAC,CAAD,CAArB;;AACA,QAAIX,KAAK,CAACe,OAAN,CAAcH,MAAd,MAA0B,CAAC,CAA3B,IAAgCC,OAAhC,IAA2ChB,GAAG,CAACmB,IAAJ,CAASH,OAAT,CAA/C,EAAkE;AAChEP,MAAAA,MAAM,GAAG;AAACO,QAAAA,OAAD;AAAUI,QAAAA,SAAS,EAAGH,KAAK,GAAGA,KAAH,GAAW;AAAtC,OAAT;AACA,aAAO,IAAP;AACD;AACF,GATD;;AAWA,MAAI,CAACR,MAAL,EAAa;AACX,UAAM,IAAIY,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,SAAOZ,MAAP;AACD,CAnBD;;AAqBA,MAAMa,OAAO,GAAGC,MAAM,IAAI;AACxB,SAAOrB,KAAK,CAACM,MAAN,CAAa,SAAb,EAAwBJ,IAAI,CAACmB,MAAD,CAA5B,EAAsCC,IAAtC,CAA2ChB,MAAM,IAAI;AAC1D,WAAOD,KAAK,CAACC,MAAD,CAAZ;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,MAAMiB,IAAI,GAAGF,MAAM,IAAI;AACrB,QAAMd,MAAM,GAAGP,KAAK,CAACuB,IAAN,CAAW,SAAX,EAAsBrB,IAAI,CAACmB,MAAD,CAA1B,CAAf;AACA,SAAOhB,KAAK,CAACE,MAAM,CAACD,MAAR,CAAZ;AACD,CAHD;;AAKAkB,MAAM,CAACC,OAAP,CAAetB,EAAf,GAAoB,MAAMiB,OAAO,CAAC,IAAD,CAAjC;;AACAI,MAAM,CAACC,OAAP,CAAerB,EAAf,GAAoB,MAAMgB,OAAO,CAAC,IAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,CAAetB,EAAf,CAAkBoB,IAAlB,GAAyB,MAAMA,IAAI,CAAC,IAAD,CAAnC;;AACAC,MAAM,CAACC,OAAP,CAAerB,EAAf,CAAkBmB,IAAlB,GAAyB,MAAMA,IAAI,CAAC,IAAD,CAAnC","sourcesContent":["\"use strict\";\n\nconst net = require(\"net\");\nconst execa = require(\"execa\");\nconst dests = [\"default\", \"0.0.0.0\", \"0.0.0.0/0\", \"::\", \"::/0\"];\n\nconst args = {\n  v4: [\"-rn\", \"-f\", \"inet\"],\n  v6: [\"-rn\", \"-f\", \"inet6\"],\n};\n\nconst parse = stdout => {\n  let result;\n\n  (stdout || \"\").trim().split(\"\\n\").some(line => {\n    const results = line.split(/ +/) || [];\n    const target = results[0];\n    const gateway = results[1];\n    const iface = results[3];\n    if (dests.indexOf(target) !== -1 && gateway && net.isIP(gateway)) {\n      result = {gateway, interface: (iface ? iface : null)};\n      return true;\n    }\n  });\n\n  if (!result) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  return result;\n};\n\nconst promise = family => {\n  return execa.stdout(\"netstat\", args[family]).then(stdout => {\n    return parse(stdout);\n  });\n};\n\nconst sync = family => {\n  const result = execa.sync(\"netstat\", args[family]);\n  return parse(result.stdout);\n};\n\nmodule.exports.v4 = () => promise(\"v4\");\nmodule.exports.v6 = () => promise(\"v6\");\n\nmodule.exports.v4.sync = () => sync(\"v4\");\nmodule.exports.v6.sync = () => sync(\"v6\");\n"]},"metadata":{},"sourceType":"script"}