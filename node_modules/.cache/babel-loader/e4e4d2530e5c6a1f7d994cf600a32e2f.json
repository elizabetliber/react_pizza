{"ast":null,"code":"var assert = require('assert');\n\nvar util = require('util');\n\nvar Buffer = require('buffer').Buffer; // Node.js version\n\n\nvar mode = /^v0\\.8\\./.test(process.version) ? 'rusty' : /^v0\\.(9|10)\\./.test(process.version) ? 'old' : /^v0\\.12\\./.test(process.version) ? 'normal' : 'modern';\nvar HTTPParser;\nvar methods;\nvar reverseMethods;\nvar kOnHeaders;\nvar kOnHeadersComplete;\nvar kOnMessageComplete;\nvar kOnBody;\n\nif (mode === 'normal' || mode === 'modern') {\n  HTTPParser = process.binding('http_parser').HTTPParser;\n  methods = HTTPParser.methods; // v6\n\n  if (!methods) methods = process.binding('http_parser').methods;\n  reverseMethods = {};\n  methods.forEach(function (method, index) {\n    reverseMethods[method] = index;\n  });\n  kOnHeaders = HTTPParser.kOnHeaders | 0;\n  kOnHeadersComplete = HTTPParser.kOnHeadersComplete | 0;\n  kOnMessageComplete = HTTPParser.kOnMessageComplete | 0;\n  kOnBody = HTTPParser.kOnBody | 0;\n} else {\n  kOnHeaders = 'onHeaders';\n  kOnHeadersComplete = 'onHeadersComplete';\n  kOnMessageComplete = 'onMessageComplete';\n  kOnBody = 'onBody';\n}\n\nfunction Deceiver(socket, options) {\n  this.socket = socket;\n  this.options = options || {};\n  this.isClient = this.options.isClient;\n}\n\nmodule.exports = Deceiver;\n\nDeceiver.create = function create(stream, options) {\n  return new Deceiver(stream, options);\n};\n\nDeceiver.prototype._toHeaderList = function _toHeaderList(object) {\n  var out = [];\n  var keys = Object.keys(object);\n\n  for (var i = 0; i < keys.length; i++) out.push(keys[i], object[keys[i]]);\n\n  return out;\n};\n\nDeceiver.prototype._isUpgrade = function _isUpgrade(request) {\n  return request.method === 'CONNECT' || request.headers.upgrade || request.headers.connection && /(^|\\W)upgrade(\\W|$)/i.test(request.headers.connection);\n}; // TODO(indutny): support CONNECT\n\n\nif (mode === 'modern') {\n  /*\n  function parserOnHeadersComplete(versionMajor, versionMinor, headers, method,\n                                   url, statusCode, statusMessage, upgrade,\n                                   shouldKeepAlive) {\n   */\n  Deceiver.prototype.emitRequest = function emitRequest(request) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n    parser.execute = null;\n    var self = this;\n    var method = reverseMethods[request.method];\n\n    parser.execute = function execute() {\n      self._skipExecute(this);\n\n      this[kOnHeadersComplete](1, 1, self._toHeaderList(request.headers), method, request.path, 0, '', self._isUpgrade(request), true);\n      return 0;\n    };\n\n    this._emitEmpty();\n  };\n\n  Deceiver.prototype.emitResponse = function emitResponse(response) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n    parser.execute = null;\n    var self = this;\n\n    parser.execute = function execute() {\n      self._skipExecute(this);\n\n      this[kOnHeadersComplete](1, 1, self._toHeaderList(response.headers), response.path, response.code, response.status, response.reason || '', self._isUpgrade(response), true);\n      return 0;\n    };\n\n    this._emitEmpty();\n  };\n} else {\n  /*\n    `function parserOnHeadersComplete(info) {`\n     info = { .versionMajor, .versionMinor, .url, .headers, .method,\n             .statusCode, .statusMessage, .upgrade, .shouldKeepAlive }\n   */\n  Deceiver.prototype.emitRequest = function emitRequest(request) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n    var method = request.method;\n    if (reverseMethods) method = reverseMethods[method];\n    var info = {\n      versionMajor: 1,\n      versionMinor: 1,\n      url: request.path,\n      headers: this._toHeaderList(request.headers),\n      method: method,\n      statusCode: 0,\n      statusMessage: '',\n      upgrade: this._isUpgrade(request),\n      shouldKeepAlive: true\n    };\n    var self = this;\n\n    parser.execute = function execute() {\n      self._skipExecute(this);\n\n      this[kOnHeadersComplete](info);\n      return 0;\n    };\n\n    this._emitEmpty();\n  };\n\n  Deceiver.prototype.emitResponse = function emitResponse(response) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n    var info = {\n      versionMajor: 1,\n      versionMinor: 1,\n      url: response.path,\n      headers: this._toHeaderList(response.headers),\n      method: false,\n      statusCode: response.status,\n      statusMessage: response.reason || '',\n      upgrade: this._isUpgrade(response),\n      shouldKeepAlive: true\n    };\n    var self = this;\n\n    parser.execute = function execute() {\n      self._skipExecute(this);\n\n      this[kOnHeadersComplete](info);\n      return 0;\n    };\n\n    this._emitEmpty();\n  };\n}\n\nDeceiver.prototype._skipExecute = function _skipExecute(parser) {\n  var self = this;\n  var oldExecute = parser.constructor.prototype.execute;\n  var oldFinish = parser.constructor.prototype.finish;\n  parser.execute = null;\n  parser.finish = null;\n\n  parser.execute = function execute(buffer, start, len) {\n    // Parser reuse\n    if (this.socket !== self.socket) {\n      this.execute = oldExecute;\n      this.finish = oldFinish;\n      return this.execute(buffer, start, len);\n    }\n\n    if (start !== undefined) buffer = buffer.slice(start, start + len);\n    self.emitBody(buffer);\n    return len;\n  };\n\n  parser.finish = function finish() {\n    // Parser reuse\n    if (this.socket !== self.socket) {\n      this.execute = oldExecute;\n      this.finish = oldFinish;\n      return this.finish();\n    }\n\n    this.execute = oldExecute;\n    this.finish = oldFinish;\n    self.emitMessageComplete();\n  };\n};\n\nDeceiver.prototype.emitBody = function emitBody(buffer) {\n  var parser = this.socket.parser;\n  assert(parser, 'No parser present');\n  parser[kOnBody](buffer, 0, buffer.length);\n};\n\nDeceiver.prototype._emitEmpty = function _emitEmpty() {\n  // Emit data to force out handling of UPGRADE\n  var empty = new Buffer(0);\n  if (this.socket.ondata) this.socket.ondata(empty, 0, 0);else this.socket.emit('data', empty);\n};\n\nDeceiver.prototype.emitMessageComplete = function emitMessageComplete() {\n  var parser = this.socket.parser;\n  assert(parser, 'No parser present');\n  parser[kOnMessageComplete]();\n};","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/http-deceiver/lib/deceiver.js"],"names":["assert","require","util","Buffer","mode","test","process","version","HTTPParser","methods","reverseMethods","kOnHeaders","kOnHeadersComplete","kOnMessageComplete","kOnBody","binding","forEach","method","index","Deceiver","socket","options","isClient","module","exports","create","stream","prototype","_toHeaderList","object","out","keys","Object","i","length","push","_isUpgrade","request","headers","upgrade","connection","emitRequest","parser","execute","self","_skipExecute","path","_emitEmpty","emitResponse","response","code","status","reason","info","versionMajor","versionMinor","url","statusCode","statusMessage","shouldKeepAlive","oldExecute","constructor","oldFinish","finish","buffer","start","len","undefined","slice","emitBody","emitMessageComplete","empty","ondata","emit"],"mappings":"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","sourcesContent":["var assert = require('assert');\nvar util = require('util');\n\nvar Buffer = require('buffer').Buffer;\n\n// Node.js version\nvar mode = /^v0\\.8\\./.test(process.version) ? 'rusty' :\n           /^v0\\.(9|10)\\./.test(process.version) ? 'old' :\n           /^v0\\.12\\./.test(process.version) ? 'normal' :\n           'modern';\n\nvar HTTPParser;\n\nvar methods;\nvar reverseMethods;\n\nvar kOnHeaders;\nvar kOnHeadersComplete;\nvar kOnMessageComplete;\nvar kOnBody;\nif (mode === 'normal' || mode === 'modern') {\n  HTTPParser = process.binding('http_parser').HTTPParser;\n  methods = HTTPParser.methods;\n\n  // v6\n  if (!methods)\n    methods = process.binding('http_parser').methods;\n\n  reverseMethods = {};\n\n  methods.forEach(function(method, index) {\n    reverseMethods[method] = index;\n  });\n\n  kOnHeaders = HTTPParser.kOnHeaders | 0;\n  kOnHeadersComplete = HTTPParser.kOnHeadersComplete | 0;\n  kOnMessageComplete = HTTPParser.kOnMessageComplete | 0;\n  kOnBody = HTTPParser.kOnBody | 0;\n} else {\n  kOnHeaders = 'onHeaders';\n  kOnHeadersComplete = 'onHeadersComplete';\n  kOnMessageComplete = 'onMessageComplete';\n  kOnBody = 'onBody';\n}\n\nfunction Deceiver(socket, options) {\n  this.socket = socket;\n  this.options = options || {};\n  this.isClient = this.options.isClient;\n}\nmodule.exports = Deceiver;\n\nDeceiver.create = function create(stream, options) {\n  return new Deceiver(stream, options);\n};\n\nDeceiver.prototype._toHeaderList = function _toHeaderList(object) {\n  var out = [];\n  var keys = Object.keys(object);\n\n  for (var i = 0; i < keys.length; i++)\n    out.push(keys[i], object[keys[i]]);\n\n  return out;\n};\n\nDeceiver.prototype._isUpgrade = function _isUpgrade(request) {\n  return request.method === 'CONNECT' ||\n         request.headers.upgrade ||\n         request.headers.connection &&\n            /(^|\\W)upgrade(\\W|$)/i.test(request.headers.connection);\n};\n\n// TODO(indutny): support CONNECT\nif (mode === 'modern') {\n  /*\n  function parserOnHeadersComplete(versionMajor, versionMinor, headers, method,\n                                   url, statusCode, statusMessage, upgrade,\n                                   shouldKeepAlive) {\n   */\n  Deceiver.prototype.emitRequest = function emitRequest(request) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n\n    parser.execute = null;\n\n    var self = this;\n    var method = reverseMethods[request.method];\n    parser.execute = function execute() {\n      self._skipExecute(this);\n      this[kOnHeadersComplete](1,\n                               1,\n                               self._toHeaderList(request.headers),\n                               method,\n                               request.path,\n                               0,\n                               '',\n                               self._isUpgrade(request),\n                               true);\n      return 0;\n    };\n\n    this._emitEmpty();\n  };\n\n  Deceiver.prototype.emitResponse = function emitResponse(response) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n\n    parser.execute = null;\n\n    var self = this;\n    parser.execute = function execute() {\n      self._skipExecute(this);\n      this[kOnHeadersComplete](1,\n                               1,\n                               self._toHeaderList(response.headers),\n                               response.path,\n                               response.code,\n                               response.status,\n                               response.reason || '',\n                               self._isUpgrade(response),\n                               true);\n      return 0;\n    };\n\n    this._emitEmpty();\n  };\n} else {\n  /*\n    `function parserOnHeadersComplete(info) {`\n\n    info = { .versionMajor, .versionMinor, .url, .headers, .method,\n             .statusCode, .statusMessage, .upgrade, .shouldKeepAlive }\n   */\n  Deceiver.prototype.emitRequest = function emitRequest(request) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n\n    var method = request.method;\n    if (reverseMethods)\n      method = reverseMethods[method];\n\n    var info = {\n      versionMajor: 1,\n      versionMinor: 1,\n      url: request.path,\n      headers: this._toHeaderList(request.headers),\n      method: method,\n      statusCode: 0,\n      statusMessage: '',\n      upgrade: this._isUpgrade(request),\n      shouldKeepAlive: true\n    };\n\n    var self = this;\n    parser.execute = function execute() {\n      self._skipExecute(this);\n      this[kOnHeadersComplete](info);\n      return 0;\n    };\n\n    this._emitEmpty();\n  };\n\n  Deceiver.prototype.emitResponse = function emitResponse(response) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n\n    var info = {\n      versionMajor: 1,\n      versionMinor: 1,\n      url: response.path,\n      headers: this._toHeaderList(response.headers),\n      method: false,\n      statusCode: response.status,\n      statusMessage: response.reason || '',\n      upgrade: this._isUpgrade(response),\n      shouldKeepAlive: true\n    };\n\n    var self = this;\n    parser.execute = function execute() {\n      self._skipExecute(this);\n      this[kOnHeadersComplete](info);\n      return 0;\n    };\n\n    this._emitEmpty();\n  };\n}\n\nDeceiver.prototype._skipExecute = function _skipExecute(parser) {\n  var self = this;\n  var oldExecute = parser.constructor.prototype.execute;\n  var oldFinish = parser.constructor.prototype.finish;\n\n  parser.execute = null;\n  parser.finish = null;\n\n  parser.execute = function execute(buffer, start, len) {\n    // Parser reuse\n    if (this.socket !== self.socket) {\n      this.execute = oldExecute;\n      this.finish = oldFinish;\n      return this.execute(buffer, start, len);\n    }\n\n    if (start !== undefined)\n      buffer = buffer.slice(start, start + len);\n    self.emitBody(buffer);\n    return len;\n  };\n\n  parser.finish = function finish() {\n    // Parser reuse\n    if (this.socket !== self.socket) {\n      this.execute = oldExecute;\n      this.finish = oldFinish;\n      return this.finish();\n    }\n\n    this.execute = oldExecute;\n    this.finish = oldFinish;\n    self.emitMessageComplete();\n  };\n};\n\nDeceiver.prototype.emitBody = function emitBody(buffer) {\n  var parser = this.socket.parser;\n  assert(parser, 'No parser present');\n\n  parser[kOnBody](buffer, 0, buffer.length);\n};\n\nDeceiver.prototype._emitEmpty = function _emitEmpty() {\n  // Emit data to force out handling of UPGRADE\n  var empty = new Buffer(0);\n  if (this.socket.ondata)\n    this.socket.ondata(empty, 0, 0);\n  else\n    this.socket.emit('data', empty);\n};\n\nDeceiver.prototype.emitMessageComplete = function emitMessageComplete() {\n  var parser = this.socket.parser;\n  assert(parser, 'No parser present');\n\n  parser[kOnMessageComplete]();\n};\n"]},"metadata":{},"sourceType":"script"}