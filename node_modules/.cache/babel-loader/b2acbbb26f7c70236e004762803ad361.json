{"ast":null,"code":"'use strict';\n\nfunction getSocketClientPath(options) {\n  let ClientImplementation;\n  let clientImplFound = true;\n\n  switch (typeof options.transportMode.client) {\n    case 'string':\n      // could be 'sockjs', 'ws', or a path that should be required\n      if (options.transportMode.client === 'sockjs') {\n        ClientImplementation = require('../../client/clients/SockJSClient');\n      } else if (options.transportMode.client === 'ws') {\n        ClientImplementation = require('../../client/clients/WebsocketClient');\n      } else {\n        try {\n          // eslint-disable-next-line import/no-dynamic-require\n          ClientImplementation = require(options.transportMode.client);\n        } catch (e) {\n          clientImplFound = false;\n        }\n      }\n\n      break;\n\n    default:\n      clientImplFound = false;\n  }\n\n  if (!clientImplFound) {\n    throw new Error(\"transportMode.client must be a string denoting a default implementation (e.g. 'sockjs', 'ws') or a full path to \" + 'a JS file which exports a class extending BaseClient (webpack-dev-server/client-src/clients/BaseClient) ' + 'via require.resolve(...)');\n  }\n\n  return ClientImplementation.getClientPath(options);\n}\n\nmodule.exports = getSocketClientPath;","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/webpack-dev-server/lib/utils/getSocketClientPath.js"],"names":["getSocketClientPath","options","ClientImplementation","clientImplFound","transportMode","client","require","e","Error","getClientPath","module","exports"],"mappings":"AAAA;;AAEA,SAASA,mBAAT,CAA6BC,OAA7B,EAAsC;AACpC,MAAIC,oBAAJ;AACA,MAAIC,eAAe,GAAG,IAAtB;;AACA,UAAQ,OAAOF,OAAO,CAACG,aAAR,CAAsBC,MAArC;AACE,SAAK,QAAL;AACE;AACA,UAAIJ,OAAO,CAACG,aAAR,CAAsBC,MAAtB,KAAiC,QAArC,EAA+C;AAC7CH,QAAAA,oBAAoB,GAAGI,OAAO,CAAC,mCAAD,CAA9B;AACD,OAFD,MAEO,IAAIL,OAAO,CAACG,aAAR,CAAsBC,MAAtB,KAAiC,IAArC,EAA2C;AAChDH,QAAAA,oBAAoB,GAAGI,OAAO,CAAC,sCAAD,CAA9B;AACD,OAFM,MAEA;AACL,YAAI;AACF;AACAJ,UAAAA,oBAAoB,GAAGI,OAAO,CAACL,OAAO,CAACG,aAAR,CAAsBC,MAAvB,CAA9B;AACD,SAHD,CAGE,OAAOE,CAAP,EAAU;AACVJ,UAAAA,eAAe,GAAG,KAAlB;AACD;AACF;;AACD;;AACF;AACEA,MAAAA,eAAe,GAAG,KAAlB;AAjBJ;;AAoBA,MAAI,CAACA,eAAL,EAAsB;AACpB,UAAM,IAAIK,KAAJ,CACJ,qHACE,0GADF,GAEE,0BAHE,CAAN;AAKD;;AAED,SAAON,oBAAoB,CAACO,aAArB,CAAmCR,OAAnC,CAAP;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiBX,mBAAjB","sourcesContent":["'use strict';\n\nfunction getSocketClientPath(options) {\n  let ClientImplementation;\n  let clientImplFound = true;\n  switch (typeof options.transportMode.client) {\n    case 'string':\n      // could be 'sockjs', 'ws', or a path that should be required\n      if (options.transportMode.client === 'sockjs') {\n        ClientImplementation = require('../../client/clients/SockJSClient');\n      } else if (options.transportMode.client === 'ws') {\n        ClientImplementation = require('../../client/clients/WebsocketClient');\n      } else {\n        try {\n          // eslint-disable-next-line import/no-dynamic-require\n          ClientImplementation = require(options.transportMode.client);\n        } catch (e) {\n          clientImplFound = false;\n        }\n      }\n      break;\n    default:\n      clientImplFound = false;\n  }\n\n  if (!clientImplFound) {\n    throw new Error(\n      \"transportMode.client must be a string denoting a default implementation (e.g. 'sockjs', 'ws') or a full path to \" +\n        'a JS file which exports a class extending BaseClient (webpack-dev-server/client-src/clients/BaseClient) ' +\n        'via require.resolve(...)'\n    );\n  }\n\n  return ClientImplementation.getClientPath(options);\n}\n\nmodule.exports = getSocketClientPath;\n"]},"metadata":{},"sourceType":"script"}