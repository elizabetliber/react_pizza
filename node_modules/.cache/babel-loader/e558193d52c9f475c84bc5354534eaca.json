{"ast":null,"code":"'use strict';\n/* global window: true */\n\n/* eslint-disable\n  multiline-ternary,\n  no-param-reassign\n*/\n\nconst PrefixFactory = require('./PrefixFactory');\n\nconst MethodFactory = require('./MethodFactory');\n\nconst defaults = {\n  name: +new Date(),\n  level: 'warn',\n  prefix: null,\n  factory: null\n};\n\nclass LogLevel {\n  constructor(options) {\n    // implement for some _very_ loose type checking. avoids getting into a\n    // circular require between MethodFactory and LogLevel\n    this.type = 'LogLevel';\n    this.options = Object.assign({}, defaults, options);\n    this.methodFactory = options.factory;\n\n    if (!this.methodFactory) {\n      const factory = options.prefix ? new PrefixFactory(this, options.prefix) : new MethodFactory(this);\n      this.methodFactory = factory;\n    }\n\n    if (!this.methodFactory.logger) {\n      this.methodFactory.logger = this;\n    }\n\n    this.name = options.name || '<unknown>'; // this.level is a setter, do this after setting up the factory\n\n    this.level = this.options.level;\n  }\n\n  get factory() {\n    return this.methodFactory;\n  }\n\n  set factory(factory) {\n    factory.logger = this;\n    this.methodFactory = factory;\n    this.methodFactory.replaceMethods(this.level);\n  }\n\n  enable() {\n    this.level = this.levels.TRACE;\n  }\n\n  disable() {\n    this.level = this.levels.SILENT;\n  }\n\n  get level() {\n    return this.currentLevel;\n  }\n\n  set level(logLevel) {\n    const level = this.methodFactory.distillLevel(logLevel);\n\n    if (level == null) {\n      throw new Error(`loglevel: setLevel() called with invalid level: ${logLevel}`);\n    }\n\n    this.currentLevel = level;\n    this.methodFactory.replaceMethods(level);\n\n    if (typeof console === 'undefined' && level < this.levels.SILENT) {\n      // eslint-disable-next-line no-console\n      console.warn('loglevel: console is undefined. The log will produce no output');\n    }\n  }\n\n  get levels() {\n    // eslint-disable-line class-methods-use-this\n    return this.methodFactory.levels;\n  }\n\n}\n\nmodule.exports = LogLevel;","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/webpack-log/src/loglevel/LogLevel.js"],"names":["PrefixFactory","require","MethodFactory","defaults","name","Date","level","prefix","factory","LogLevel","constructor","options","type","Object","assign","methodFactory","logger","replaceMethods","enable","levels","TRACE","disable","SILENT","currentLevel","logLevel","distillLevel","Error","console","warn","module","exports"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;;AACA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA7B;;AAEA,MAAME,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAE,CAAC,IAAIC,IAAJ,EADQ;AAEfC,EAAAA,KAAK,EAAE,MAFQ;AAGfC,EAAAA,MAAM,EAAE,IAHO;AAIfC,EAAAA,OAAO,EAAE;AAJM,CAAjB;;AAOA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;AACA;AACA,SAAKC,IAAL,GAAY,UAAZ;AACA,SAAKD,OAAL,GAAeE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,QAAlB,EAA4BQ,OAA5B,CAAf;AACA,SAAKI,aAAL,GAAqBJ,OAAO,CAACH,OAA7B;;AAEA,QAAI,CAAC,KAAKO,aAAV,EAAyB;AACvB,YAAMP,OAAO,GAAGG,OAAO,CAACJ,MAAR,GACZ,IAAIP,aAAJ,CAAkB,IAAlB,EAAwBW,OAAO,CAACJ,MAAhC,CADY,GAEZ,IAAIL,aAAJ,CAAkB,IAAlB,CAFJ;AAIA,WAAKa,aAAL,GAAqBP,OAArB;AACD;;AAED,QAAI,CAAC,KAAKO,aAAL,CAAmBC,MAAxB,EAAgC;AAC9B,WAAKD,aAAL,CAAmBC,MAAnB,GAA4B,IAA5B;AACD;;AAED,SAAKZ,IAAL,GAAYO,OAAO,CAACP,IAAR,IAAgB,WAA5B,CAnBmB,CAoBnB;;AACA,SAAKE,KAAL,GAAa,KAAKK,OAAL,CAAaL,KAA1B;AACD;;AAEU,MAAPE,OAAO,GAAG;AACZ,WAAO,KAAKO,aAAZ;AACD;;AAEU,MAAPP,OAAO,CAACA,OAAD,EAAU;AACnBA,IAAAA,OAAO,CAACQ,MAAR,GAAiB,IAAjB;AAEA,SAAKD,aAAL,GAAqBP,OAArB;AACA,SAAKO,aAAL,CAAmBE,cAAnB,CAAkC,KAAKX,KAAvC;AACD;;AAEDY,EAAAA,MAAM,GAAG;AACP,SAAKZ,KAAL,GAAa,KAAKa,MAAL,CAAYC,KAAzB;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,SAAKf,KAAL,GAAa,KAAKa,MAAL,CAAYG,MAAzB;AACD;;AAEQ,MAALhB,KAAK,GAAG;AACV,WAAO,KAAKiB,YAAZ;AACD;;AAEQ,MAALjB,KAAK,CAACkB,QAAD,EAAW;AAClB,UAAMlB,KAAK,GAAG,KAAKS,aAAL,CAAmBU,YAAnB,CAAgCD,QAAhC,CAAd;;AAEA,QAAIlB,KAAK,IAAI,IAAb,EAAmB;AACjB,YAAM,IAAIoB,KAAJ,CACH,mDAAkDF,QAAS,EADxD,CAAN;AAGD;;AAED,SAAKD,YAAL,GAAoBjB,KAApB;AACA,SAAKS,aAAL,CAAmBE,cAAnB,CAAkCX,KAAlC;;AAEA,QAAI,OAAOqB,OAAP,KAAmB,WAAnB,IAAkCrB,KAAK,GAAG,KAAKa,MAAL,CAAYG,MAA1D,EAAkE;AAChE;AACAK,MAAAA,OAAO,CAACC,IAAR,CACE,gEADF;AAGD;AACF;;AAES,MAANT,MAAM,GAAG;AAAE;AACb,WAAO,KAAKJ,aAAL,CAAmBI,MAA1B;AACD;;AAtEY;;AAyEfU,MAAM,CAACC,OAAP,GAAiBrB,QAAjB","sourcesContent":["'use strict';\n\n/* global window: true */\n/* eslint-disable\n  multiline-ternary,\n  no-param-reassign\n*/\nconst PrefixFactory = require('./PrefixFactory');\nconst MethodFactory = require('./MethodFactory');\n\nconst defaults = {\n  name: +new Date(),\n  level: 'warn',\n  prefix: null,\n  factory: null\n};\n\nclass LogLevel {\n  constructor(options) {\n    // implement for some _very_ loose type checking. avoids getting into a\n    // circular require between MethodFactory and LogLevel\n    this.type = 'LogLevel';\n    this.options = Object.assign({}, defaults, options);\n    this.methodFactory = options.factory;\n\n    if (!this.methodFactory) {\n      const factory = options.prefix\n        ? new PrefixFactory(this, options.prefix)\n        : new MethodFactory(this);\n\n      this.methodFactory = factory;\n    }\n\n    if (!this.methodFactory.logger) {\n      this.methodFactory.logger = this;\n    }\n\n    this.name = options.name || '<unknown>';\n    // this.level is a setter, do this after setting up the factory\n    this.level = this.options.level;\n  }\n\n  get factory() {\n    return this.methodFactory;\n  }\n\n  set factory(factory) {\n    factory.logger = this;\n\n    this.methodFactory = factory;\n    this.methodFactory.replaceMethods(this.level);\n  }\n\n  enable() {\n    this.level = this.levels.TRACE;\n  }\n\n  disable() {\n    this.level = this.levels.SILENT;\n  }\n\n  get level() {\n    return this.currentLevel;\n  }\n\n  set level(logLevel) {\n    const level = this.methodFactory.distillLevel(logLevel);\n\n    if (level == null) {\n      throw new Error(\n        `loglevel: setLevel() called with invalid level: ${logLevel}`\n      );\n    }\n\n    this.currentLevel = level;\n    this.methodFactory.replaceMethods(level);\n\n    if (typeof console === 'undefined' && level < this.levels.SILENT) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'loglevel: console is undefined. The log will produce no output'\n      );\n    }\n  }\n\n  get levels() { // eslint-disable-line class-methods-use-this\n    return this.methodFactory.levels;\n  }\n}\n\nmodule.exports = LogLevel;\n"]},"metadata":{},"sourceType":"script"}