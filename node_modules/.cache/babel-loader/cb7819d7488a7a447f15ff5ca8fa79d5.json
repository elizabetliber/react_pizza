{"ast":null,"code":"'use strict';\n\nconst url = require('url');\n\nconst ip = require('internal-ip');\n\nfunction createDomain(options, server) {\n  const protocol = options.https ? 'https' : 'http';\n  const hostname = options.useLocalIp ? ip.v4.sync() || 'localhost' : options.host || 'localhost'; // eslint-disable-next-line no-nested-ternary\n\n  const port = options.socket ? 0 : server ? server.address().port : 0; // use explicitly defined public url\n  // (prefix with protocol if not explicitly given)\n\n  if (options.public) {\n    return /^[a-zA-Z]+:\\/\\//.test(options.public) ? `${options.public}` : `${protocol}://${options.public}`;\n  } // the formatted domain (url without path) of the webpack server\n\n\n  return url.format({\n    protocol,\n    hostname,\n    port\n  });\n}\n\nmodule.exports = createDomain;","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/webpack-dev-server/lib/utils/createDomain.js"],"names":["url","require","ip","createDomain","options","server","protocol","https","hostname","useLocalIp","v4","sync","host","port","socket","address","public","test","format","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,aAAD,CAAlB;;AAEA,SAASE,YAAT,CAAsBC,OAAtB,EAA+BC,MAA/B,EAAuC;AACrC,QAAMC,QAAQ,GAAGF,OAAO,CAACG,KAAR,GAAgB,OAAhB,GAA0B,MAA3C;AACA,QAAMC,QAAQ,GAAGJ,OAAO,CAACK,UAAR,GACbP,EAAE,CAACQ,EAAH,CAAMC,IAAN,MAAgB,WADH,GAEbP,OAAO,CAACQ,IAAR,IAAgB,WAFpB,CAFqC,CAMrC;;AACA,QAAMC,IAAI,GAAGT,OAAO,CAACU,MAAR,GAAiB,CAAjB,GAAqBT,MAAM,GAAGA,MAAM,CAACU,OAAP,GAAiBF,IAApB,GAA2B,CAAnE,CAPqC,CAQrC;AACA;;AACA,MAAIT,OAAO,CAACY,MAAZ,EAAoB;AAClB,WAAO,kBAAkBC,IAAlB,CAAuBb,OAAO,CAACY,MAA/B,IACF,GAAEZ,OAAO,CAACY,MAAO,EADf,GAEF,GAAEV,QAAS,MAAKF,OAAO,CAACY,MAAO,EAFpC;AAGD,GAdoC,CAerC;;;AACA,SAAOhB,GAAG,CAACkB,MAAJ,CAAW;AAChBZ,IAAAA,QADgB;AAEhBE,IAAAA,QAFgB;AAGhBK,IAAAA;AAHgB,GAAX,CAAP;AAKD;;AAEDM,MAAM,CAACC,OAAP,GAAiBjB,YAAjB","sourcesContent":["'use strict';\n\nconst url = require('url');\nconst ip = require('internal-ip');\n\nfunction createDomain(options, server) {\n  const protocol = options.https ? 'https' : 'http';\n  const hostname = options.useLocalIp\n    ? ip.v4.sync() || 'localhost'\n    : options.host || 'localhost';\n\n  // eslint-disable-next-line no-nested-ternary\n  const port = options.socket ? 0 : server ? server.address().port : 0;\n  // use explicitly defined public url\n  // (prefix with protocol if not explicitly given)\n  if (options.public) {\n    return /^[a-zA-Z]+:\\/\\//.test(options.public)\n      ? `${options.public}`\n      : `${protocol}://${options.public}`;\n  }\n  // the formatted domain (url without path) of the webpack server\n  return url.format({\n    protocol,\n    hostname,\n    port,\n  });\n}\n\nmodule.exports = createDomain;\n"]},"metadata":{},"sourceType":"script"}