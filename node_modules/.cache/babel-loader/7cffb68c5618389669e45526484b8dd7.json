{"ast":null,"code":"'use strict';\n\nconst os = require('os');\n\nconst defaultGateway = require('default-gateway');\n\nconst ipaddr = require('ipaddr.js');\n\nfunction findIp(gateway) {\n  const interfaces = os.networkInterfaces();\n  const gatewayIp = ipaddr.parse(gateway);\n  let ip; // Look for the matching interface in all local interfaces\n\n  Object.keys(interfaces).some(name => {\n    return interfaces[name].some(addr => {\n      const prefix = ipaddr.parse(addr.netmask).prefixLengthFromSubnetMask();\n      const net = ipaddr.parseCIDR(`${addr.address}/${prefix}`);\n\n      if (net[0] && net[0].kind() === gatewayIp.kind() && gatewayIp.match(net)) {\n        ip = net[0].toString();\n      }\n\n      return Boolean(ip);\n    });\n  });\n  return ip;\n}\n\nfunction promise(family) {\n  return defaultGateway[family]().then(result => {\n    return findIp(result.gateway) || null;\n  }).catch(() => null);\n}\n\nfunction sync(family) {\n  try {\n    const result = defaultGateway[family].sync();\n    return findIp(result.gateway) || null;\n  } catch (error) {\n    return null;\n  }\n}\n\nconst internalIp = {};\n\ninternalIp.v6 = () => promise('v6');\n\ninternalIp.v4 = () => promise('v4');\n\ninternalIp.v6.sync = () => sync('v6');\n\ninternalIp.v4.sync = () => sync('v4');\n\nmodule.exports = internalIp; // TODO: Remove this for the next major release\n\nmodule.exports.default = internalIp;","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/internal-ip/index.js"],"names":["os","require","defaultGateway","ipaddr","findIp","gateway","interfaces","networkInterfaces","gatewayIp","parse","ip","Object","keys","some","name","addr","prefix","netmask","prefixLengthFromSubnetMask","net","parseCIDR","address","kind","match","toString","Boolean","promise","family","then","result","catch","sync","error","internalIp","v6","v4","module","exports","default"],"mappings":"AAAA;;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,WAAD,CAAtB;;AAEA,SAASG,MAAT,CAAgBC,OAAhB,EAAyB;AACxB,QAAMC,UAAU,GAAGN,EAAE,CAACO,iBAAH,EAAnB;AACA,QAAMC,SAAS,GAAGL,MAAM,CAACM,KAAP,CAAaJ,OAAb,CAAlB;AACA,MAAIK,EAAJ,CAHwB,CAKxB;;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYN,UAAZ,EAAwBO,IAAxB,CAA6BC,IAAI,IAAI;AACpC,WAAOR,UAAU,CAACQ,IAAD,CAAV,CAAiBD,IAAjB,CAAsBE,IAAI,IAAI;AACpC,YAAMC,MAAM,GAAGb,MAAM,CAACM,KAAP,CAAaM,IAAI,CAACE,OAAlB,EAA2BC,0BAA3B,EAAf;AACA,YAAMC,GAAG,GAAGhB,MAAM,CAACiB,SAAP,CAAkB,GAAEL,IAAI,CAACM,OAAQ,IAAGL,MAAO,EAA3C,CAAZ;;AAEA,UAAIG,GAAG,CAAC,CAAD,CAAH,IAAUA,GAAG,CAAC,CAAD,CAAH,CAAOG,IAAP,OAAkBd,SAAS,CAACc,IAAV,EAA5B,IAAgDd,SAAS,CAACe,KAAV,CAAgBJ,GAAhB,CAApD,EAA0E;AACzET,QAAAA,EAAE,GAAGS,GAAG,CAAC,CAAD,CAAH,CAAOK,QAAP,EAAL;AACA;;AAED,aAAOC,OAAO,CAACf,EAAD,CAAd;AACA,KATM,CAAP;AAUA,GAXD;AAaA,SAAOA,EAAP;AACA;;AAED,SAASgB,OAAT,CAAiBC,MAAjB,EAAyB;AACxB,SAAOzB,cAAc,CAACyB,MAAD,CAAd,GAAyBC,IAAzB,CAA8BC,MAAM,IAAI;AAC9C,WAAOzB,MAAM,CAACyB,MAAM,CAACxB,OAAR,CAAN,IAA0B,IAAjC;AACA,GAFM,EAEJyB,KAFI,CAEE,MAAM,IAFR,CAAP;AAGA;;AAED,SAASC,IAAT,CAAcJ,MAAd,EAAsB;AACrB,MAAI;AACH,UAAME,MAAM,GAAG3B,cAAc,CAACyB,MAAD,CAAd,CAAuBI,IAAvB,EAAf;AACA,WAAO3B,MAAM,CAACyB,MAAM,CAACxB,OAAR,CAAN,IAA0B,IAAjC;AACA,GAHD,CAGE,OAAO2B,KAAP,EAAc;AACf,WAAO,IAAP;AACA;AACD;;AAED,MAAMC,UAAU,GAAG,EAAnB;;AACAA,UAAU,CAACC,EAAX,GAAgB,MAAMR,OAAO,CAAC,IAAD,CAA7B;;AACAO,UAAU,CAACE,EAAX,GAAgB,MAAMT,OAAO,CAAC,IAAD,CAA7B;;AACAO,UAAU,CAACC,EAAX,CAAcH,IAAd,GAAqB,MAAMA,IAAI,CAAC,IAAD,CAA/B;;AACAE,UAAU,CAACE,EAAX,CAAcJ,IAAd,GAAqB,MAAMA,IAAI,CAAC,IAAD,CAA/B;;AAEAK,MAAM,CAACC,OAAP,GAAiBJ,UAAjB,C,CACA;;AACAG,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBL,UAAzB","sourcesContent":["'use strict';\nconst os = require('os');\nconst defaultGateway = require('default-gateway');\nconst ipaddr = require('ipaddr.js');\n\nfunction findIp(gateway) {\n\tconst interfaces = os.networkInterfaces();\n\tconst gatewayIp = ipaddr.parse(gateway);\n\tlet ip;\n\n\t// Look for the matching interface in all local interfaces\n\tObject.keys(interfaces).some(name => {\n\t\treturn interfaces[name].some(addr => {\n\t\t\tconst prefix = ipaddr.parse(addr.netmask).prefixLengthFromSubnetMask();\n\t\t\tconst net = ipaddr.parseCIDR(`${addr.address}/${prefix}`);\n\n\t\t\tif (net[0] && net[0].kind() === gatewayIp.kind() && gatewayIp.match(net)) {\n\t\t\t\tip = net[0].toString();\n\t\t\t}\n\n\t\t\treturn Boolean(ip);\n\t\t});\n\t});\n\n\treturn ip;\n}\n\nfunction promise(family) {\n\treturn defaultGateway[family]().then(result => {\n\t\treturn findIp(result.gateway) || null;\n\t}).catch(() => null);\n}\n\nfunction sync(family) {\n\ttry {\n\t\tconst result = defaultGateway[family].sync();\n\t\treturn findIp(result.gateway) || null;\n\t} catch (error) {\n\t\treturn null;\n\t}\n}\n\nconst internalIp = {};\ninternalIp.v6 = () => promise('v6');\ninternalIp.v4 = () => promise('v4');\ninternalIp.v6.sync = () => sync('v6');\ninternalIp.v4.sync = () => sync('v4');\n\nmodule.exports = internalIp;\n// TODO: Remove this for the next major release\nmodule.exports.default = internalIp;\n"]},"metadata":{},"sourceType":"script"}