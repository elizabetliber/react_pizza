{"ast":null,"code":"'use strict';\n\nvar os = require('os');\n\nvar util = require('util');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar serviceName = require('multicast-dns-service-types');\n\nvar txt = require('dns-txt')();\n\nvar TLD = '.local';\nmodule.exports = Service;\nutil.inherits(Service, EventEmitter);\n\nfunction Service(opts) {\n  if (!opts.name) throw new Error('Required name not given');\n  if (!opts.type) throw new Error('Required type not given');\n  if (!opts.port) throw new Error('Required port not given');\n  this.name = opts.name;\n  this.protocol = opts.protocol || 'tcp';\n  this.type = serviceName.stringify(opts.type, this.protocol);\n  this.host = opts.host || os.hostname();\n  this.port = opts.port;\n  this.fqdn = this.name + '.' + this.type + TLD;\n  this.subtypes = opts.subtypes || null;\n  this.txt = opts.txt || null;\n  this.published = false;\n  this._activated = false; // indicates intent - true: starting/started, false: stopping/stopped\n}\n\nService.prototype._records = function () {\n  var records = [rr_ptr(this), rr_srv(this), rr_txt(this)];\n  var self = this;\n  var interfaces = os.networkInterfaces();\n  Object.keys(interfaces).forEach(function (name) {\n    interfaces[name].forEach(function (addr) {\n      if (addr.internal) return;\n\n      if (addr.family === 'IPv4') {\n        records.push(rr_a(self, addr.address));\n      } else {\n        records.push(rr_aaaa(self, addr.address));\n      }\n    });\n  });\n  return records;\n};\n\nfunction rr_ptr(service) {\n  return {\n    name: service.type + TLD,\n    type: 'PTR',\n    ttl: 28800,\n    data: service.fqdn\n  };\n}\n\nfunction rr_srv(service) {\n  return {\n    name: service.fqdn,\n    type: 'SRV',\n    ttl: 120,\n    data: {\n      port: service.port,\n      target: service.host\n    }\n  };\n}\n\nfunction rr_txt(service) {\n  return {\n    name: service.fqdn,\n    type: 'TXT',\n    ttl: 4500,\n    data: txt.encode(service.txt)\n  };\n}\n\nfunction rr_a(service, ip) {\n  return {\n    name: service.host,\n    type: 'A',\n    ttl: 120,\n    data: ip\n  };\n}\n\nfunction rr_aaaa(service, ip) {\n  return {\n    name: service.host,\n    type: 'AAAA',\n    ttl: 120,\n    data: ip\n  };\n}","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/bonjour/lib/service.js"],"names":["os","require","util","EventEmitter","serviceName","txt","TLD","module","exports","Service","inherits","opts","name","Error","type","port","protocol","stringify","host","hostname","fqdn","subtypes","published","_activated","prototype","_records","records","rr_ptr","rr_srv","rr_txt","self","interfaces","networkInterfaces","Object","keys","forEach","addr","internal","family","push","rr_a","address","rr_aaaa","service","ttl","data","target","encode","ip"],"mappings":"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","sourcesContent":["'use strict'\n\nvar os = require('os')\nvar util = require('util')\nvar EventEmitter = require('events').EventEmitter\nvar serviceName = require('multicast-dns-service-types')\nvar txt = require('dns-txt')()\n\nvar TLD = '.local'\n\nmodule.exports = Service\n\nutil.inherits(Service, EventEmitter)\n\nfunction Service (opts) {\n  if (!opts.name) throw new Error('Required name not given')\n  if (!opts.type) throw new Error('Required type not given')\n  if (!opts.port) throw new Error('Required port not given')\n\n  this.name = opts.name\n  this.protocol = opts.protocol || 'tcp'\n  this.type = serviceName.stringify(opts.type, this.protocol)\n  this.host = opts.host || os.hostname()\n  this.port = opts.port\n  this.fqdn = this.name + '.' + this.type + TLD\n  this.subtypes = opts.subtypes || null\n  this.txt = opts.txt || null\n  this.published = false\n\n  this._activated = false // indicates intent - true: starting/started, false: stopping/stopped\n}\n\nService.prototype._records = function () {\n  var records = [rr_ptr(this), rr_srv(this), rr_txt(this)]\n\n  var self = this\n  var interfaces = os.networkInterfaces()\n  Object.keys(interfaces).forEach(function (name) {\n    interfaces[name].forEach(function (addr) {\n      if (addr.internal) return\n      if (addr.family === 'IPv4') {\n        records.push(rr_a(self, addr.address))\n      } else {\n        records.push(rr_aaaa(self, addr.address))\n      }\n    })\n  })\n\n  return records\n}\n\nfunction rr_ptr (service) {\n  return {\n    name: service.type + TLD,\n    type: 'PTR',\n    ttl: 28800,\n    data: service.fqdn\n  }\n}\n\nfunction rr_srv (service) {\n  return {\n    name: service.fqdn,\n    type: 'SRV',\n    ttl: 120,\n    data: {\n      port: service.port,\n      target: service.host\n    }\n  }\n}\n\nfunction rr_txt (service) {\n  return {\n    name: service.fqdn,\n    type: 'TXT',\n    ttl: 4500,\n    data: txt.encode(service.txt)\n  }\n}\n\nfunction rr_a (service, ip) {\n  return {\n    name: service.host,\n    type: 'A',\n    ttl: 120,\n    data: ip\n  }\n}\n\nfunction rr_aaaa (service, ip) {\n  return {\n    name: service.host,\n    type: 'AAAA',\n    ttl: 120,\n    data: ip\n  }\n}\n"]},"metadata":{},"sourceType":"script"}