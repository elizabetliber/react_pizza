{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst MemoryFileSystem = require('memory-fs');\n\nconst mkdirp = require('mkdirp');\n\nconst {\n  colors\n} = require('webpack-log');\n\nconst DevMiddlewareError = require('./DevMiddlewareError');\n\nmodule.exports = {\n  toDisk(context) {\n    const compilers = context.compiler.compilers || [context.compiler];\n\n    for (const compiler of compilers) {\n      compiler.hooks.emit.tap('WebpackDevMiddleware', compilation => {\n        if (compiler.hasWebpackDevMiddlewareAssetEmittedCallback) {\n          return;\n        }\n\n        compiler.hooks.assetEmitted.tapAsync('WebpackDevMiddleware', (file, info, callback) => {\n          let targetPath = null;\n          let content = null; // webpack@5\n\n          if (info.compilation) {\n            ({\n              targetPath,\n              content\n            } = info);\n          } else {\n            let targetFile = file;\n            const queryStringIdx = targetFile.indexOf('?');\n\n            if (queryStringIdx >= 0) {\n              targetFile = targetFile.substr(0, queryStringIdx);\n            }\n\n            let {\n              outputPath\n            } = compiler; // TODO Why? Need remove in future major release\n\n            if (outputPath === '/') {\n              outputPath = compiler.context;\n            }\n\n            outputPath = compilation.getPath(outputPath, {});\n            content = info;\n            targetPath = path.join(outputPath, targetFile);\n          }\n\n          const {\n            writeToDisk: filter\n          } = context.options;\n          const allowWrite = filter && typeof filter === 'function' ? filter(targetPath) : true;\n\n          if (!allowWrite) {\n            return callback();\n          }\n\n          const {\n            log\n          } = context;\n          const dir = path.dirname(targetPath);\n          return mkdirp(dir, mkdirpError => {\n            if (mkdirpError) {\n              return callback(mkdirpError);\n            }\n\n            return fs.writeFile(targetPath, content, writeFileError => {\n              if (writeFileError) {\n                return callback(writeFileError);\n              }\n\n              log.debug(colors.cyan(`Asset written to disk: ${path.relative(process.cwd(), targetPath)}`));\n              return callback();\n            });\n          });\n        });\n        compiler.hasWebpackDevMiddlewareAssetEmittedCallback = true;\n      });\n    }\n  },\n\n  setFs(context, compiler) {\n    if (typeof compiler.outputPath === 'string' && !path.posix.isAbsolute(compiler.outputPath) && !path.win32.isAbsolute(compiler.outputPath)) {\n      throw new DevMiddlewareError('`output.path` needs to be an absolute path or `/`.');\n    }\n\n    let fileSystem; // store our files in memory\n\n    const isConfiguredFs = context.options.fs;\n    const isMemoryFs = !isConfiguredFs && !compiler.compilers && compiler.outputFileSystem instanceof MemoryFileSystem;\n\n    if (isConfiguredFs) {\n      // eslint-disable-next-line no-shadow\n      const {\n        fs\n      } = context.options;\n\n      if (typeof fs.join !== 'function') {\n        // very shallow check\n        throw new Error('Invalid options: options.fs.join() method is expected');\n      } // eslint-disable-next-line no-param-reassign\n\n\n      compiler.outputFileSystem = fs;\n      fileSystem = fs;\n    } else if (isMemoryFs) {\n      fileSystem = compiler.outputFileSystem;\n    } else {\n      fileSystem = new MemoryFileSystem(); // eslint-disable-next-line no-param-reassign\n\n      compiler.outputFileSystem = fileSystem;\n    } // eslint-disable-next-line no-param-reassign\n\n\n    context.fs = fileSystem;\n  }\n\n};","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/webpack-dev-middleware/lib/fs.js"],"names":["fs","require","path","MemoryFileSystem","mkdirp","colors","DevMiddlewareError","module","exports","toDisk","context","compilers","compiler","hooks","emit","tap","compilation","hasWebpackDevMiddlewareAssetEmittedCallback","assetEmitted","tapAsync","file","info","callback","targetPath","content","targetFile","queryStringIdx","indexOf","substr","outputPath","getPath","join","writeToDisk","filter","options","allowWrite","log","dir","dirname","mkdirpError","writeFile","writeFileError","debug","cyan","relative","process","cwd","setFs","posix","isAbsolute","win32","fileSystem","isConfiguredFs","isMemoryFs","outputFileSystem","Error"],"mappings":"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","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst MemoryFileSystem = require('memory-fs');\nconst mkdirp = require('mkdirp');\nconst { colors } = require('webpack-log');\n\nconst DevMiddlewareError = require('./DevMiddlewareError');\n\nmodule.exports = {\n  toDisk(context) {\n    const compilers = context.compiler.compilers || [context.compiler];\n\n    for (const compiler of compilers) {\n      compiler.hooks.emit.tap('WebpackDevMiddleware', (compilation) => {\n        if (compiler.hasWebpackDevMiddlewareAssetEmittedCallback) {\n          return;\n        }\n\n        compiler.hooks.assetEmitted.tapAsync(\n          'WebpackDevMiddleware',\n          (file, info, callback) => {\n            let targetPath = null;\n            let content = null;\n\n            // webpack@5\n            if (info.compilation) {\n              ({ targetPath, content } = info);\n            } else {\n              let targetFile = file;\n\n              const queryStringIdx = targetFile.indexOf('?');\n\n              if (queryStringIdx >= 0) {\n                targetFile = targetFile.substr(0, queryStringIdx);\n              }\n\n              let { outputPath } = compiler;\n\n              // TODO Why? Need remove in future major release\n              if (outputPath === '/') {\n                outputPath = compiler.context;\n              }\n\n              outputPath = compilation.getPath(outputPath, {});\n              content = info;\n              targetPath = path.join(outputPath, targetFile);\n            }\n\n            const { writeToDisk: filter } = context.options;\n            const allowWrite =\n              filter && typeof filter === 'function'\n                ? filter(targetPath)\n                : true;\n\n            if (!allowWrite) {\n              return callback();\n            }\n\n            const { log } = context;\n            const dir = path.dirname(targetPath);\n\n            return mkdirp(dir, (mkdirpError) => {\n              if (mkdirpError) {\n                return callback(mkdirpError);\n              }\n\n              return fs.writeFile(targetPath, content, (writeFileError) => {\n                if (writeFileError) {\n                  return callback(writeFileError);\n                }\n\n                log.debug(\n                  colors.cyan(\n                    `Asset written to disk: ${path.relative(\n                      process.cwd(),\n                      targetPath\n                    )}`\n                  )\n                );\n\n                return callback();\n              });\n            });\n          }\n        );\n        compiler.hasWebpackDevMiddlewareAssetEmittedCallback = true;\n      });\n    }\n  },\n\n  setFs(context, compiler) {\n    if (\n      typeof compiler.outputPath === 'string' &&\n      !path.posix.isAbsolute(compiler.outputPath) &&\n      !path.win32.isAbsolute(compiler.outputPath)\n    ) {\n      throw new DevMiddlewareError(\n        '`output.path` needs to be an absolute path or `/`.'\n      );\n    }\n\n    let fileSystem;\n\n    // store our files in memory\n    const isConfiguredFs = context.options.fs;\n    const isMemoryFs =\n      !isConfiguredFs &&\n      !compiler.compilers &&\n      compiler.outputFileSystem instanceof MemoryFileSystem;\n\n    if (isConfiguredFs) {\n      // eslint-disable-next-line no-shadow\n      const { fs } = context.options;\n\n      if (typeof fs.join !== 'function') {\n        // very shallow check\n        throw new Error(\n          'Invalid options: options.fs.join() method is expected'\n        );\n      }\n\n      // eslint-disable-next-line no-param-reassign\n      compiler.outputFileSystem = fs;\n      fileSystem = fs;\n    } else if (isMemoryFs) {\n      fileSystem = compiler.outputFileSystem;\n    } else {\n      fileSystem = new MemoryFileSystem();\n\n      // eslint-disable-next-line no-param-reassign\n      compiler.outputFileSystem = fileSystem;\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    context.fs = fileSystem;\n  },\n};\n"]},"metadata":{},"sourceType":"script"}