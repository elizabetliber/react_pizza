{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst mime = require('mime');\n\nconst DevMiddlewareError = require('./DevMiddlewareError');\n\nconst {\n  getFilenameFromUrl,\n  handleRangeHeaders,\n  handleRequest,\n  ready\n} = require('./util'); // Do not add a charset to the Content-Type header of these file types\n// otherwise the client will fail to render them correctly.\n\n\nconst NonCharsetFileTypes = /\\.(wasm|usdz)$/;\n\nmodule.exports = function wrapper(context) {\n  return function middleware(req, res, next) {\n    // fixes #282. credit @cexoso. in certain edge situations res.locals is\n    // undefined.\n    // eslint-disable-next-line no-param-reassign\n    res.locals = res.locals || {};\n\n    function goNext() {\n      if (!context.options.serverSideRender) {\n        return next();\n      }\n\n      return new Promise(resolve => {\n        ready(context, () => {\n          // eslint-disable-next-line no-param-reassign\n          res.locals.webpackStats = context.webpackStats; // eslint-disable-next-line no-param-reassign\n\n          res.locals.fs = context.fs;\n          resolve(next());\n        }, req);\n      });\n    }\n\n    const acceptedMethods = context.options.methods || ['GET', 'HEAD'];\n\n    if (acceptedMethods.indexOf(req.method) === -1) {\n      return goNext();\n    }\n\n    let filename = getFilenameFromUrl(context.options.publicPath, context.compiler, req.url);\n\n    if (filename === false) {\n      return goNext();\n    }\n\n    return new Promise(resolve => {\n      handleRequest(context, filename, processRequest, req); // eslint-disable-next-line consistent-return\n\n      function processRequest() {\n        try {\n          let stat = context.fs.statSync(filename);\n\n          if (!stat.isFile()) {\n            if (stat.isDirectory()) {\n              let {\n                index\n              } = context.options; // eslint-disable-next-line no-undefined\n\n              if (index === undefined || index === true) {\n                index = 'index.html';\n              } else if (!index) {\n                throw new DevMiddlewareError('next');\n              }\n\n              filename = path.posix.join(filename, index);\n              stat = context.fs.statSync(filename);\n\n              if (!stat.isFile()) {\n                throw new DevMiddlewareError('next');\n              }\n            } else {\n              throw new DevMiddlewareError('next');\n            }\n          }\n        } catch (e) {\n          return resolve(goNext());\n        } // server content\n\n\n        let content = context.fs.readFileSync(filename);\n        content = handleRangeHeaders(content, req, res);\n        let contentType = mime.getType(filename) || '';\n\n        if (!NonCharsetFileTypes.test(filename)) {\n          contentType += '; charset=UTF-8';\n        }\n\n        if (!res.getHeader || !res.getHeader('Content-Type')) {\n          res.setHeader('Content-Type', contentType);\n        }\n\n        res.setHeader('Content-Length', content.length);\n        const {\n          headers\n        } = context.options;\n\n        if (headers) {\n          for (const name in headers) {\n            if ({}.hasOwnProperty.call(headers, name)) {\n              res.setHeader(name, context.options.headers[name]);\n            }\n          }\n        } // Express automatically sets the statusCode to 200, but not all servers do (Koa).\n        // eslint-disable-next-line no-param-reassign\n\n\n        res.statusCode = res.statusCode || 200;\n\n        if (res.send) {\n          res.send(content);\n        } else {\n          res.end(content);\n        }\n\n        resolve();\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/webpack-dev-middleware/lib/middleware.js"],"names":["path","require","mime","DevMiddlewareError","getFilenameFromUrl","handleRangeHeaders","handleRequest","ready","NonCharsetFileTypes","module","exports","wrapper","context","middleware","req","res","next","locals","goNext","options","serverSideRender","Promise","resolve","webpackStats","fs","acceptedMethods","methods","indexOf","method","filename","publicPath","compiler","url","processRequest","stat","statSync","isFile","isDirectory","index","undefined","posix","join","e","content","readFileSync","contentType","getType","test","getHeader","setHeader","length","headers","name","hasOwnProperty","call","statusCode","send","end"],"mappings":"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","sourcesContent":["'use strict';\n\nconst path = require('path');\n\nconst mime = require('mime');\n\nconst DevMiddlewareError = require('./DevMiddlewareError');\nconst {\n  getFilenameFromUrl,\n  handleRangeHeaders,\n  handleRequest,\n  ready,\n} = require('./util');\n\n// Do not add a charset to the Content-Type header of these file types\n// otherwise the client will fail to render them correctly.\nconst NonCharsetFileTypes = /\\.(wasm|usdz)$/;\n\nmodule.exports = function wrapper(context) {\n  return function middleware(req, res, next) {\n    // fixes #282. credit @cexoso. in certain edge situations res.locals is\n    // undefined.\n    // eslint-disable-next-line no-param-reassign\n    res.locals = res.locals || {};\n\n    function goNext() {\n      if (!context.options.serverSideRender) {\n        return next();\n      }\n\n      return new Promise((resolve) => {\n        ready(\n          context,\n          () => {\n            // eslint-disable-next-line no-param-reassign\n            res.locals.webpackStats = context.webpackStats;\n            // eslint-disable-next-line no-param-reassign\n            res.locals.fs = context.fs;\n\n            resolve(next());\n          },\n          req\n        );\n      });\n    }\n\n    const acceptedMethods = context.options.methods || ['GET', 'HEAD'];\n\n    if (acceptedMethods.indexOf(req.method) === -1) {\n      return goNext();\n    }\n\n    let filename = getFilenameFromUrl(\n      context.options.publicPath,\n      context.compiler,\n      req.url\n    );\n\n    if (filename === false) {\n      return goNext();\n    }\n\n    return new Promise((resolve) => {\n      handleRequest(context, filename, processRequest, req);\n      // eslint-disable-next-line consistent-return\n      function processRequest() {\n        try {\n          let stat = context.fs.statSync(filename);\n\n          if (!stat.isFile()) {\n            if (stat.isDirectory()) {\n              let { index } = context.options;\n\n              // eslint-disable-next-line no-undefined\n              if (index === undefined || index === true) {\n                index = 'index.html';\n              } else if (!index) {\n                throw new DevMiddlewareError('next');\n              }\n\n              filename = path.posix.join(filename, index);\n              stat = context.fs.statSync(filename);\n\n              if (!stat.isFile()) {\n                throw new DevMiddlewareError('next');\n              }\n            } else {\n              throw new DevMiddlewareError('next');\n            }\n          }\n        } catch (e) {\n          return resolve(goNext());\n        }\n\n        // server content\n        let content = context.fs.readFileSync(filename);\n\n        content = handleRangeHeaders(content, req, res);\n\n        let contentType = mime.getType(filename) || '';\n\n        if (!NonCharsetFileTypes.test(filename)) {\n          contentType += '; charset=UTF-8';\n        }\n\n        if (!res.getHeader || !res.getHeader('Content-Type')) {\n          res.setHeader('Content-Type', contentType);\n        }\n\n        res.setHeader('Content-Length', content.length);\n\n        const { headers } = context.options;\n\n        if (headers) {\n          for (const name in headers) {\n            if ({}.hasOwnProperty.call(headers, name)) {\n              res.setHeader(name, context.options.headers[name]);\n            }\n          }\n        }\n\n        // Express automatically sets the statusCode to 200, but not all servers do (Koa).\n        // eslint-disable-next-line no-param-reassign\n        res.statusCode = res.statusCode || 200;\n\n        if (res.send) {\n          res.send(content);\n        } else {\n          res.end(content);\n        }\n\n        resolve();\n      }\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"script"}