{"ast":null,"code":"'use strict';\n\nconst weblog = require('webpack-log');\n\nmodule.exports = function ctx(compiler, options) {\n  const context = {\n    state: false,\n    webpackStats: null,\n    callbacks: [],\n    options,\n    compiler,\n    watching: null,\n    forceRebuild: false\n  };\n\n  if (options.logger) {\n    context.log = options.logger;\n  } else {\n    context.log = weblog({\n      level: options.logLevel || 'info',\n      name: 'wdm',\n      timestamp: options.logTime\n    });\n  }\n\n  const {\n    log\n  } = context;\n\n  function done(stats) {\n    // We are now on valid state\n    context.state = true;\n    context.webpackStats = stats; // Do the stuff in nextTick, because bundle may be invalidated\n    // if a change happened while compiling\n\n    process.nextTick(() => {\n      // check if still in valid state\n      if (!context.state) {\n        return;\n      } // print webpack output\n\n\n      context.options.reporter(context.options, {\n        log,\n        state: true,\n        stats\n      }); // execute callback that are delayed\n\n      const cbs = context.callbacks;\n      context.callbacks = [];\n      cbs.forEach(cb => {\n        cb(stats);\n      });\n    }); // In lazy mode, we may issue another rebuild\n\n    if (context.forceRebuild) {\n      context.forceRebuild = false;\n      rebuild();\n    }\n  }\n\n  function invalid(callback) {\n    if (context.state) {\n      context.options.reporter(context.options, {\n        log,\n        state: false\n      });\n    } // We are now in invalid state\n\n\n    context.state = false;\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n\n  function rebuild() {\n    if (context.state) {\n      context.state = false;\n      context.compiler.run(err => {\n        if (err) {\n          log.error(err.stack || err);\n\n          if (err.details) {\n            log.error(err.details);\n          }\n        }\n      });\n    } else {\n      context.forceRebuild = true;\n    }\n  }\n\n  context.rebuild = rebuild;\n  context.compiler.hooks.invalid.tap('WebpackDevMiddleware', invalid);\n  context.compiler.hooks.run.tap('WebpackDevMiddleware', invalid);\n  context.compiler.hooks.done.tap('WebpackDevMiddleware', done);\n  context.compiler.hooks.watchRun.tap('WebpackDevMiddleware', (comp, callback) => {\n    invalid(callback);\n  });\n  return context;\n};","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/webpack-dev-middleware/lib/context.js"],"names":["weblog","require","module","exports","ctx","compiler","options","context","state","webpackStats","callbacks","watching","forceRebuild","logger","log","level","logLevel","name","timestamp","logTime","done","stats","process","nextTick","reporter","cbs","forEach","cb","rebuild","invalid","callback","run","err","error","stack","details","hooks","tap","watchRun","comp"],"mappings":"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","sourcesContent":["'use strict';\n\nconst weblog = require('webpack-log');\n\nmodule.exports = function ctx(compiler, options) {\n  const context = {\n    state: false,\n    webpackStats: null,\n    callbacks: [],\n    options,\n    compiler,\n    watching: null,\n    forceRebuild: false,\n  };\n\n  if (options.logger) {\n    context.log = options.logger;\n  } else {\n    context.log = weblog({\n      level: options.logLevel || 'info',\n      name: 'wdm',\n      timestamp: options.logTime,\n    });\n  }\n\n  const { log } = context;\n\n  function done(stats) {\n    // We are now on valid state\n    context.state = true;\n    context.webpackStats = stats;\n\n    // Do the stuff in nextTick, because bundle may be invalidated\n    // if a change happened while compiling\n    process.nextTick(() => {\n      // check if still in valid state\n      if (!context.state) {\n        return;\n      }\n\n      // print webpack output\n      context.options.reporter(context.options, {\n        log,\n        state: true,\n        stats,\n      });\n\n      // execute callback that are delayed\n      const cbs = context.callbacks;\n      context.callbacks = [];\n      cbs.forEach((cb) => {\n        cb(stats);\n      });\n    });\n\n    // In lazy mode, we may issue another rebuild\n    if (context.forceRebuild) {\n      context.forceRebuild = false;\n      rebuild();\n    }\n  }\n\n  function invalid(callback) {\n    if (context.state) {\n      context.options.reporter(context.options, {\n        log,\n        state: false,\n      });\n    }\n\n    // We are now in invalid state\n    context.state = false;\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n\n  function rebuild() {\n    if (context.state) {\n      context.state = false;\n      context.compiler.run((err) => {\n        if (err) {\n          log.error(err.stack || err);\n          if (err.details) {\n            log.error(err.details);\n          }\n        }\n      });\n    } else {\n      context.forceRebuild = true;\n    }\n  }\n\n  context.rebuild = rebuild;\n  context.compiler.hooks.invalid.tap('WebpackDevMiddleware', invalid);\n  context.compiler.hooks.run.tap('WebpackDevMiddleware', invalid);\n  context.compiler.hooks.done.tap('WebpackDevMiddleware', done);\n  context.compiler.hooks.watchRun.tap(\n    'WebpackDevMiddleware',\n    (comp, callback) => {\n      invalid(callback);\n    }\n  );\n\n  return context;\n};\n"]},"metadata":{},"sourceType":"script"}