{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst childProcess = require('child_process');\n\nconst isWsl = require('is-wsl');\n\nmodule.exports = (target, opts) => {\n  if (typeof target !== 'string') {\n    return Promise.reject(new Error('Expected a `target`'));\n  }\n\n  opts = Object.assign({\n    wait: true\n  }, opts);\n  let cmd;\n  let appArgs = [];\n  let args = [];\n  const cpOpts = {};\n\n  if (Array.isArray(opts.app)) {\n    appArgs = opts.app.slice(1);\n    opts.app = opts.app[0];\n  }\n\n  if (process.platform === 'darwin') {\n    cmd = 'open';\n\n    if (opts.wait) {\n      args.push('-W');\n    }\n\n    if (opts.app) {\n      args.push('-a', opts.app);\n    }\n  } else if (process.platform === 'win32' || isWsl) {\n    cmd = 'cmd' + (isWsl ? '.exe' : '');\n    args.push('/c', 'start', '\"\"', '/b');\n    target = target.replace(/&/g, '^&');\n\n    if (opts.wait) {\n      args.push('/wait');\n    }\n\n    if (opts.app) {\n      args.push(opts.app);\n    }\n\n    if (appArgs.length > 0) {\n      args = args.concat(appArgs);\n    }\n  } else {\n    if (opts.app) {\n      cmd = opts.app;\n    } else {\n      const useSystemXdgOpen = process.versions.electron || process.platform === 'android';\n      cmd = useSystemXdgOpen ? 'xdg-open' : path.join(__dirname, 'xdg-open');\n    }\n\n    if (appArgs.length > 0) {\n      args = args.concat(appArgs);\n    }\n\n    if (!opts.wait) {\n      // `xdg-open` will block the process unless\n      // stdio is ignored and it's detached from the parent\n      // even if it's unref'd\n      cpOpts.stdio = 'ignore';\n      cpOpts.detached = true;\n    }\n  }\n\n  args.push(target);\n\n  if (process.platform === 'darwin' && appArgs.length > 0) {\n    args.push('--args');\n    args = args.concat(appArgs);\n  }\n\n  const cp = childProcess.spawn(cmd, args, cpOpts);\n\n  if (opts.wait) {\n    return new Promise((resolve, reject) => {\n      cp.once('error', reject);\n      cp.once('close', code => {\n        if (code > 0) {\n          reject(new Error('Exited with code ' + code));\n          return;\n        }\n\n        resolve(cp);\n      });\n    });\n  }\n\n  cp.unref();\n  return Promise.resolve(cp);\n};","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/opn/index.js"],"names":["path","require","childProcess","isWsl","module","exports","target","opts","Promise","reject","Error","Object","assign","wait","cmd","appArgs","args","cpOpts","Array","isArray","app","slice","process","platform","push","replace","length","concat","useSystemXdgOpen","versions","electron","join","__dirname","stdio","detached","cp","spawn","resolve","once","code","unref"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,QAAD,CAArB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,CAACC,MAAD,EAASC,IAAT,KAAkB;AAClC,MAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC/B,WAAOE,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,qBAAV,CAAf,CAAP;AACA;;AAEDH,EAAAA,IAAI,GAAGI,MAAM,CAACC,MAAP,CAAc;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAd,EAA4BN,IAA5B,CAAP;AAEA,MAAIO,GAAJ;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,QAAMC,MAAM,GAAG,EAAf;;AAEA,MAAIC,KAAK,CAACC,OAAN,CAAcZ,IAAI,CAACa,GAAnB,CAAJ,EAA6B;AAC5BL,IAAAA,OAAO,GAAGR,IAAI,CAACa,GAAL,CAASC,KAAT,CAAe,CAAf,CAAV;AACAd,IAAAA,IAAI,CAACa,GAAL,GAAWb,IAAI,CAACa,GAAL,CAAS,CAAT,CAAX;AACA;;AAED,MAAIE,OAAO,CAACC,QAAR,KAAqB,QAAzB,EAAmC;AAClCT,IAAAA,GAAG,GAAG,MAAN;;AAEA,QAAIP,IAAI,CAACM,IAAT,EAAe;AACdG,MAAAA,IAAI,CAACQ,IAAL,CAAU,IAAV;AACA;;AAED,QAAIjB,IAAI,CAACa,GAAT,EAAc;AACbJ,MAAAA,IAAI,CAACQ,IAAL,CAAU,IAAV,EAAgBjB,IAAI,CAACa,GAArB;AACA;AACD,GAVD,MAUO,IAAIE,OAAO,CAACC,QAAR,KAAqB,OAArB,IAAgCpB,KAApC,EAA2C;AACjDW,IAAAA,GAAG,GAAG,SAASX,KAAK,GAAG,MAAH,GAAY,EAA1B,CAAN;AACAa,IAAAA,IAAI,CAACQ,IAAL,CAAU,IAAV,EAAgB,OAAhB,EAAyB,IAAzB,EAA+B,IAA/B;AACAlB,IAAAA,MAAM,GAAGA,MAAM,CAACmB,OAAP,CAAe,IAAf,EAAqB,IAArB,CAAT;;AAEA,QAAIlB,IAAI,CAACM,IAAT,EAAe;AACdG,MAAAA,IAAI,CAACQ,IAAL,CAAU,OAAV;AACA;;AAED,QAAIjB,IAAI,CAACa,GAAT,EAAc;AACbJ,MAAAA,IAAI,CAACQ,IAAL,CAAUjB,IAAI,CAACa,GAAf;AACA;;AAED,QAAIL,OAAO,CAACW,MAAR,GAAiB,CAArB,EAAwB;AACvBV,MAAAA,IAAI,GAAGA,IAAI,CAACW,MAAL,CAAYZ,OAAZ,CAAP;AACA;AACD,GAhBM,MAgBA;AACN,QAAIR,IAAI,CAACa,GAAT,EAAc;AACbN,MAAAA,GAAG,GAAGP,IAAI,CAACa,GAAX;AACA,KAFD,MAEO;AACN,YAAMQ,gBAAgB,GAAGN,OAAO,CAACO,QAAR,CAAiBC,QAAjB,IAA6BR,OAAO,CAACC,QAAR,KAAqB,SAA3E;AACAT,MAAAA,GAAG,GAAGc,gBAAgB,GAAG,UAAH,GAAgB5B,IAAI,CAAC+B,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAAtC;AACA;;AAED,QAAIjB,OAAO,CAACW,MAAR,GAAiB,CAArB,EAAwB;AACvBV,MAAAA,IAAI,GAAGA,IAAI,CAACW,MAAL,CAAYZ,OAAZ,CAAP;AACA;;AAED,QAAI,CAACR,IAAI,CAACM,IAAV,EAAgB;AACf;AACA;AACA;AACAI,MAAAA,MAAM,CAACgB,KAAP,GAAe,QAAf;AACAhB,MAAAA,MAAM,CAACiB,QAAP,GAAkB,IAAlB;AACA;AACD;;AAEDlB,EAAAA,IAAI,CAACQ,IAAL,CAAUlB,MAAV;;AAEA,MAAIgB,OAAO,CAACC,QAAR,KAAqB,QAArB,IAAiCR,OAAO,CAACW,MAAR,GAAiB,CAAtD,EAAyD;AACxDV,IAAAA,IAAI,CAACQ,IAAL,CAAU,QAAV;AACAR,IAAAA,IAAI,GAAGA,IAAI,CAACW,MAAL,CAAYZ,OAAZ,CAAP;AACA;;AAED,QAAMoB,EAAE,GAAGjC,YAAY,CAACkC,KAAb,CAAmBtB,GAAnB,EAAwBE,IAAxB,EAA8BC,MAA9B,CAAX;;AAEA,MAAIV,IAAI,CAACM,IAAT,EAAe;AACd,WAAO,IAAIL,OAAJ,CAAY,CAAC6B,OAAD,EAAU5B,MAAV,KAAqB;AACvC0B,MAAAA,EAAE,CAACG,IAAH,CAAQ,OAAR,EAAiB7B,MAAjB;AAEA0B,MAAAA,EAAE,CAACG,IAAH,CAAQ,OAAR,EAAiBC,IAAI,IAAI;AACxB,YAAIA,IAAI,GAAG,CAAX,EAAc;AACb9B,UAAAA,MAAM,CAAC,IAAIC,KAAJ,CAAU,sBAAsB6B,IAAhC,CAAD,CAAN;AACA;AACA;;AAEDF,QAAAA,OAAO,CAACF,EAAD,CAAP;AACA,OAPD;AAQA,KAXM,CAAP;AAYA;;AAEDA,EAAAA,EAAE,CAACK,KAAH;AAEA,SAAOhC,OAAO,CAAC6B,OAAR,CAAgBF,EAAhB,CAAP;AACA,CA3FD","sourcesContent":["'use strict';\nconst path = require('path');\nconst childProcess = require('child_process');\nconst isWsl = require('is-wsl');\n\nmodule.exports = (target, opts) => {\n\tif (typeof target !== 'string') {\n\t\treturn Promise.reject(new Error('Expected a `target`'));\n\t}\n\n\topts = Object.assign({wait: true}, opts);\n\n\tlet cmd;\n\tlet appArgs = [];\n\tlet args = [];\n\tconst cpOpts = {};\n\n\tif (Array.isArray(opts.app)) {\n\t\tappArgs = opts.app.slice(1);\n\t\topts.app = opts.app[0];\n\t}\n\n\tif (process.platform === 'darwin') {\n\t\tcmd = 'open';\n\n\t\tif (opts.wait) {\n\t\t\targs.push('-W');\n\t\t}\n\n\t\tif (opts.app) {\n\t\t\targs.push('-a', opts.app);\n\t\t}\n\t} else if (process.platform === 'win32' || isWsl) {\n\t\tcmd = 'cmd' + (isWsl ? '.exe' : '');\n\t\targs.push('/c', 'start', '\"\"', '/b');\n\t\ttarget = target.replace(/&/g, '^&');\n\n\t\tif (opts.wait) {\n\t\t\targs.push('/wait');\n\t\t}\n\n\t\tif (opts.app) {\n\t\t\targs.push(opts.app);\n\t\t}\n\n\t\tif (appArgs.length > 0) {\n\t\t\targs = args.concat(appArgs);\n\t\t}\n\t} else {\n\t\tif (opts.app) {\n\t\t\tcmd = opts.app;\n\t\t} else {\n\t\t\tconst useSystemXdgOpen = process.versions.electron || process.platform === 'android';\n\t\t\tcmd = useSystemXdgOpen ? 'xdg-open' : path.join(__dirname, 'xdg-open');\n\t\t}\n\n\t\tif (appArgs.length > 0) {\n\t\t\targs = args.concat(appArgs);\n\t\t}\n\n\t\tif (!opts.wait) {\n\t\t\t// `xdg-open` will block the process unless\n\t\t\t// stdio is ignored and it's detached from the parent\n\t\t\t// even if it's unref'd\n\t\t\tcpOpts.stdio = 'ignore';\n\t\t\tcpOpts.detached = true;\n\t\t}\n\t}\n\n\targs.push(target);\n\n\tif (process.platform === 'darwin' && appArgs.length > 0) {\n\t\targs.push('--args');\n\t\targs = args.concat(appArgs);\n\t}\n\n\tconst cp = childProcess.spawn(cmd, args, cpOpts);\n\n\tif (opts.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcp.once('error', reject);\n\n\t\t\tcp.once('close', code => {\n\t\t\t\tif (code > 0) {\n\t\t\t\t\treject(new Error('Exited with code ' + code));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(cp);\n\t\t\t});\n\t\t});\n\t}\n\n\tcp.unref();\n\n\treturn Promise.resolve(cp);\n};\n"]},"metadata":{},"sourceType":"script"}