{"ast":null,"code":"'use strict'; // NOTE: Mostly copy paste from node\n\nexports.writeHead = function writeHead(statusCode, reason, obj) {\n  var headers;\n\n  if (typeof reason === 'string') {\n    // writeHead(statusCode, reasonPhrase[, headers])\n    this.statusMessage = reason;\n  } else {\n    // writeHead(statusCode[, headers])\n    this.statusMessage = this.statusMessage || 'unknown';\n    obj = reason;\n  }\n\n  this.statusCode = statusCode;\n\n  if (this._headers) {\n    // Slow-case: when progressive API and header fields are passed.\n    if (obj) {\n      var keys = Object.keys(obj);\n\n      for (var i = 0; i < keys.length; i++) {\n        var k = keys[i];\n        if (k) this.setHeader(k, obj[k]);\n      }\n    } // only progressive api is used\n\n\n    headers = this._renderHeaders();\n  } else {\n    // only writeHead() called\n    headers = obj;\n  }\n\n  if (statusCode === 204 || statusCode === 304 || statusCode >= 100 && statusCode <= 199) {\n    // RFC 2616, 10.2.5:\n    // The 204 response MUST NOT include a message-body, and thus is always\n    // terminated by the first empty line after the header fields.\n    // RFC 2616, 10.3.5:\n    // The 304 response MUST NOT contain a message-body, and thus is always\n    // terminated by the first empty line after the header fields.\n    // RFC 2616, 10.1 Informational 1xx:\n    // This class of status code indicates a provisional response,\n    // consisting only of the Status-Line and optional headers, and is\n    // terminated by an empty line.\n    this._hasBody = false;\n  } // don't keep alive connections where the client expects 100 Continue\n  // but we sent a final status; they may put extra bytes on the wire.\n\n\n  if (this._expect_continue && !this._sent100) {\n    this.shouldKeepAlive = false;\n  } // Implicit headers sent!\n\n\n  this._header = true;\n  this._headerSent = true;\n\n  if (this.socket._handle) {\n    this.socket._handle._spdyState.stream.respond(this.statusCode, headers);\n  }\n};\n\nexports.end = function end(data, encoding, callback) {\n  if (!this._headerSent) {\n    this.writeHead(this.statusCode);\n  }\n\n  if (!this.socket._handle) {\n    return;\n  } // Compatibility with Node.js core\n\n\n  this.finished = true;\n  var self = this;\n  var handle = this.socket._handle;\n  handle._spdyState.ending = true;\n  this.socket.end(data, encoding, function () {\n    self.constructor.prototype.end.call(self, '', 'utf8', callback);\n  });\n};\n\nexports.push = function push(path, headers, callback) {\n  var frame = {\n    path: path,\n    method: headers.method ? headers.method.toString() : 'GET',\n    status: headers.status ? parseInt(headers.status, 10) : 200,\n    host: this._req.headers.host,\n    headers: headers.request,\n    response: headers.response\n  };\n  var stream = this.spdyStream;\n  return stream.pushPromise(frame, callback);\n};\n\nexports.writeContinue = function writeContinue(callback) {\n  if (this.socket._handle) {\n    this.socket._handle._spdyState.stream.respond(100, {}, callback);\n  }\n};","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/spdy/lib/spdy/response.js"],"names":["exports","writeHead","statusCode","reason","obj","headers","statusMessage","_headers","keys","Object","i","length","k","setHeader","_renderHeaders","_hasBody","_expect_continue","_sent100","shouldKeepAlive","_header","_headerSent","socket","_handle","_spdyState","stream","respond","end","data","encoding","callback","finished","self","handle","ending","constructor","prototype","call","push","path","frame","method","toString","status","parseInt","host","_req","request","response","spdyStream","pushPromise","writeContinue"],"mappings":"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","sourcesContent":["'use strict'\n\n// NOTE: Mostly copy paste from node\nexports.writeHead = function writeHead (statusCode, reason, obj) {\n  var headers\n\n  if (typeof reason === 'string') {\n    // writeHead(statusCode, reasonPhrase[, headers])\n    this.statusMessage = reason\n  } else {\n    // writeHead(statusCode[, headers])\n    this.statusMessage =\n      this.statusMessage || 'unknown'\n    obj = reason\n  }\n  this.statusCode = statusCode\n\n  if (this._headers) {\n    // Slow-case: when progressive API and header fields are passed.\n    if (obj) {\n      var keys = Object.keys(obj)\n      for (var i = 0; i < keys.length; i++) {\n        var k = keys[i]\n        if (k) this.setHeader(k, obj[k])\n      }\n    }\n    // only progressive api is used\n    headers = this._renderHeaders()\n  } else {\n    // only writeHead() called\n    headers = obj\n  }\n\n  if (statusCode === 204 || statusCode === 304 ||\n      (statusCode >= 100 && statusCode <= 199)) {\n    // RFC 2616, 10.2.5:\n    // The 204 response MUST NOT include a message-body, and thus is always\n    // terminated by the first empty line after the header fields.\n    // RFC 2616, 10.3.5:\n    // The 304 response MUST NOT contain a message-body, and thus is always\n    // terminated by the first empty line after the header fields.\n    // RFC 2616, 10.1 Informational 1xx:\n    // This class of status code indicates a provisional response,\n    // consisting only of the Status-Line and optional headers, and is\n    // terminated by an empty line.\n    this._hasBody = false\n  }\n\n  // don't keep alive connections where the client expects 100 Continue\n  // but we sent a final status; they may put extra bytes on the wire.\n  if (this._expect_continue && !this._sent100) {\n    this.shouldKeepAlive = false\n  }\n\n  // Implicit headers sent!\n  this._header = true\n  this._headerSent = true\n\n  if (this.socket._handle) { this.socket._handle._spdyState.stream.respond(this.statusCode, headers) }\n}\n\nexports.end = function end (data, encoding, callback) {\n  if (!this._headerSent) {\n    this.writeHead(this.statusCode)\n  }\n\n  if (!this.socket._handle) {\n    return\n  }\n\n  // Compatibility with Node.js core\n  this.finished = true\n\n  var self = this\n  var handle = this.socket._handle\n  handle._spdyState.ending = true\n  this.socket.end(data, encoding, function () {\n    self.constructor.prototype.end.call(self, '', 'utf8', callback)\n  })\n}\n\nexports.push = function push (path, headers, callback) {\n  var frame = {\n    path: path,\n    method: headers.method ? headers.method.toString() : 'GET',\n    status: headers.status ? parseInt(headers.status, 10) : 200,\n    host: this._req.headers.host,\n    headers: headers.request,\n    response: headers.response\n  }\n\n  var stream = this.spdyStream\n  return stream.pushPromise(frame, callback)\n}\n\nexports.writeContinue = function writeContinue (callback) {\n  if (this.socket._handle) {\n    this.socket._handle._spdyState.stream.respond(100, {}, callback)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}