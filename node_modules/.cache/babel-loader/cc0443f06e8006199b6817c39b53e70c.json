{"ast":null,"code":"'use strict';\n\nconst logger = require('webpack-log');\n\nconst colors = require('./colors');\n\nconst runOpen = require('./runOpen'); // TODO: don't emit logs when webpack-dev-server is used via Node.js API\n\n\nfunction status(uri, options, log, useColor) {\n  if (options.quiet === true) {\n    // Add temporary logger to output just the status of the dev server\n    log = logger({\n      name: 'wds',\n      level: 'info',\n      timestamp: options.logTime\n    });\n  }\n\n  const contentBase = Array.isArray(options.contentBase) ? options.contentBase.join(', ') : options.contentBase;\n\n  if (options.socket) {\n    log.info(`Listening to socket at ${colors.info(useColor, options.socket)}`);\n  } else {\n    log.info(`Project is running at ${colors.info(useColor, uri)}`);\n  }\n\n  log.info(`webpack output is served from ${colors.info(useColor, options.publicPath)}`);\n\n  if (contentBase) {\n    log.info(`Content not from webpack is served from ${colors.info(useColor, contentBase)}`);\n  }\n\n  if (options.historyApiFallback) {\n    log.info(`404s will fallback to ${colors.info(useColor, options.historyApiFallback.index || '/index.html')}`);\n  }\n\n  if (options.bonjour) {\n    log.info('Broadcasting \"http\" with subtype of \"webpack\" via ZeroConf DNS (Bonjour)');\n  }\n\n  if (options.open) {\n    runOpen(uri, options, log);\n  }\n}\n\nmodule.exports = status;","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/webpack-dev-server/lib/utils/status.js"],"names":["logger","require","colors","runOpen","status","uri","options","log","useColor","quiet","name","level","timestamp","logTime","contentBase","Array","isArray","join","socket","info","publicPath","historyApiFallback","index","bonjour","open","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,WAAD,CAAvB,C,CAEA;;;AACA,SAASG,MAAT,CAAgBC,GAAhB,EAAqBC,OAArB,EAA8BC,GAA9B,EAAmCC,QAAnC,EAA6C;AAC3C,MAAIF,OAAO,CAACG,KAAR,KAAkB,IAAtB,EAA4B;AAC1B;AACAF,IAAAA,GAAG,GAAGP,MAAM,CAAC;AACXU,MAAAA,IAAI,EAAE,KADK;AAEXC,MAAAA,KAAK,EAAE,MAFI;AAGXC,MAAAA,SAAS,EAAEN,OAAO,CAACO;AAHR,KAAD,CAAZ;AAKD;;AAED,QAAMC,WAAW,GAAGC,KAAK,CAACC,OAAN,CAAcV,OAAO,CAACQ,WAAtB,IAChBR,OAAO,CAACQ,WAAR,CAAoBG,IAApB,CAAyB,IAAzB,CADgB,GAEhBX,OAAO,CAACQ,WAFZ;;AAIA,MAAIR,OAAO,CAACY,MAAZ,EAAoB;AAClBX,IAAAA,GAAG,CAACY,IAAJ,CAAU,0BAAyBjB,MAAM,CAACiB,IAAP,CAAYX,QAAZ,EAAsBF,OAAO,CAACY,MAA9B,CAAsC,EAAzE;AACD,GAFD,MAEO;AACLX,IAAAA,GAAG,CAACY,IAAJ,CAAU,yBAAwBjB,MAAM,CAACiB,IAAP,CAAYX,QAAZ,EAAsBH,GAAtB,CAA2B,EAA7D;AACD;;AAEDE,EAAAA,GAAG,CAACY,IAAJ,CACG,iCAAgCjB,MAAM,CAACiB,IAAP,CAAYX,QAAZ,EAAsBF,OAAO,CAACc,UAA9B,CAA0C,EAD7E;;AAIA,MAAIN,WAAJ,EAAiB;AACfP,IAAAA,GAAG,CAACY,IAAJ,CACG,2CAA0CjB,MAAM,CAACiB,IAAP,CACzCX,QADyC,EAEzCM,WAFyC,CAGzC,EAJJ;AAMD;;AAED,MAAIR,OAAO,CAACe,kBAAZ,EAAgC;AAC9Bd,IAAAA,GAAG,CAACY,IAAJ,CACG,yBAAwBjB,MAAM,CAACiB,IAAP,CACvBX,QADuB,EAEvBF,OAAO,CAACe,kBAAR,CAA2BC,KAA3B,IAAoC,aAFb,CAGvB,EAJJ;AAMD;;AAED,MAAIhB,OAAO,CAACiB,OAAZ,EAAqB;AACnBhB,IAAAA,GAAG,CAACY,IAAJ,CACE,0EADF;AAGD;;AAED,MAAIb,OAAO,CAACkB,IAAZ,EAAkB;AAChBrB,IAAAA,OAAO,CAACE,GAAD,EAAMC,OAAN,EAAeC,GAAf,CAAP;AACD;AACF;;AAEDkB,MAAM,CAACC,OAAP,GAAiBtB,MAAjB","sourcesContent":["'use strict';\n\nconst logger = require('webpack-log');\nconst colors = require('./colors');\nconst runOpen = require('./runOpen');\n\n// TODO: don't emit logs when webpack-dev-server is used via Node.js API\nfunction status(uri, options, log, useColor) {\n  if (options.quiet === true) {\n    // Add temporary logger to output just the status of the dev server\n    log = logger({\n      name: 'wds',\n      level: 'info',\n      timestamp: options.logTime,\n    });\n  }\n\n  const contentBase = Array.isArray(options.contentBase)\n    ? options.contentBase.join(', ')\n    : options.contentBase;\n\n  if (options.socket) {\n    log.info(`Listening to socket at ${colors.info(useColor, options.socket)}`);\n  } else {\n    log.info(`Project is running at ${colors.info(useColor, uri)}`);\n  }\n\n  log.info(\n    `webpack output is served from ${colors.info(useColor, options.publicPath)}`\n  );\n\n  if (contentBase) {\n    log.info(\n      `Content not from webpack is served from ${colors.info(\n        useColor,\n        contentBase\n      )}`\n    );\n  }\n\n  if (options.historyApiFallback) {\n    log.info(\n      `404s will fallback to ${colors.info(\n        useColor,\n        options.historyApiFallback.index || '/index.html'\n      )}`\n    );\n  }\n\n  if (options.bonjour) {\n    log.info(\n      'Broadcasting \"http\" with subtype of \"webpack\" via ZeroConf DNS (Bonjour)'\n    );\n  }\n\n  if (options.open) {\n    runOpen(uri, options, log);\n  }\n}\n\nmodule.exports = status;\n"]},"metadata":{},"sourceType":"script"}