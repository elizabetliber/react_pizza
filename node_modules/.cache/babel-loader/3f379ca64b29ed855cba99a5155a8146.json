{"ast":null,"code":"\"use strict\";\n\nconst execa = require(\"execa\");\n\nconst ipRegex = require(\"ip-regex\");\n\nconst gwArgs = \"path Win32_NetworkAdapterConfiguration where IPEnabled=true get DefaultIPGateway,Index /format:table\".split(\" \");\nconst ifArgs = \"path Win32_NetworkAdapter get Index,NetConnectionID /format:table\".split(\" \");\n\nconst parse = (gwTable, ifTable, family) => {\n  let gateway, gwid, result;\n  (gwTable || \"\").trim().split(\"\\n\").splice(1).some(line => {\n    const results = line.trim().split(/} +/) || [];\n    const gw = results[0];\n    const id = results[1];\n    gateway = (ipRegex[family]().exec((gw || \"\").trim()) || [])[0];\n\n    if (gateway) {\n      gwid = id;\n      return true;\n    }\n  });\n  (ifTable || \"\").trim().split(\"\\n\").splice(1).some(line => {\n    const i = line.indexOf(\" \");\n    const id = line.substr(0, i).trim();\n    const name = line.substr(i + 1).trim();\n\n    if (id === gwid) {\n      result = {\n        gateway,\n        interface: name ? name : null\n      };\n      return true;\n    }\n  });\n\n  if (!result) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  return result;\n};\n\nconst spawnOpts = {\n  windowsHide: true\n};\n\nconst promise = family => {\n  return Promise.all([execa.stdout(\"wmic\", gwArgs, spawnOpts), execa.stdout(\"wmic\", ifArgs, spawnOpts)]).then(results => {\n    const gwTable = results[0];\n    const ifTable = results[1];\n    return parse(gwTable, ifTable, family);\n  });\n};\n\nconst sync = family => {\n  const gwTable = execa.sync(\"wmic\", gwArgs, spawnOpts).stdout;\n  const ifTable = execa.sync(\"wmic\", ifArgs, spawnOpts).stdout;\n  return parse(gwTable, ifTable, family);\n};\n\nmodule.exports.v4 = () => promise(\"v4\");\n\nmodule.exports.v6 = () => promise(\"v6\");\n\nmodule.exports.v4.sync = () => sync(\"v4\");\n\nmodule.exports.v6.sync = () => sync(\"v6\");","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/default-gateway/win32.js"],"names":["execa","require","ipRegex","gwArgs","split","ifArgs","parse","gwTable","ifTable","family","gateway","gwid","result","trim","splice","some","line","results","gw","id","exec","i","indexOf","substr","name","interface","Error","spawnOpts","windowsHide","promise","Promise","all","stdout","then","sync","module","exports","v4","v6"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst execa = require(\"execa\");\nconst ipRegex = require(\"ip-regex\");\n\nconst gwArgs = \"path Win32_NetworkAdapterConfiguration where IPEnabled=true get DefaultIPGateway,Index /format:table\".split(\" \");\nconst ifArgs = \"path Win32_NetworkAdapter get Index,NetConnectionID /format:table\".split(\" \");\n\nconst parse = (gwTable, ifTable, family) => {\n  let gateway, gwid, result;\n\n  (gwTable || \"\").trim().split(\"\\n\").splice(1).some(line => {\n    const results = line.trim().split(/} +/) || [];\n    const gw = results[0];\n    const id = results[1];\n    gateway = (ipRegex[family]().exec((gw || \"\").trim()) || [])[0];\n    if (gateway) {\n      gwid = id;\n      return true;\n    }\n  });\n\n  (ifTable || \"\").trim().split(\"\\n\").splice(1).some(line => {\n    const i = line.indexOf(\" \");\n    const id = line.substr(0, i).trim();\n    const name = line.substr(i + 1).trim();\n    if (id === gwid) {\n      result = {gateway, interface: name ? name : null};\n      return true;\n    }\n  });\n\n  if (!result) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  return result;\n};\n\nconst spawnOpts = {\n  windowsHide: true,\n};\n\nconst promise = family => {\n  return Promise.all([\n    execa.stdout(\"wmic\", gwArgs, spawnOpts),\n    execa.stdout(\"wmic\", ifArgs, spawnOpts),\n  ]).then(results => {\n    const gwTable = results[0];\n    const ifTable = results[1];\n\n    return parse(gwTable, ifTable, family);\n  });\n};\n\nconst sync = family => {\n  const gwTable = execa.sync(\"wmic\", gwArgs, spawnOpts).stdout;\n  const ifTable = execa.sync(\"wmic\", ifArgs, spawnOpts).stdout;\n\n  return parse(gwTable, ifTable, family);\n};\n\nmodule.exports.v4 = () => promise(\"v4\");\nmodule.exports.v6 = () => promise(\"v6\");\n\nmodule.exports.v4.sync = () => sync(\"v4\");\nmodule.exports.v6.sync = () => sync(\"v6\");\n"]},"metadata":{},"sourceType":"script"}