{"ast":null,"code":"'use strict';\n/* eslint-disable\n  no-param-reassign,\n  space-before-function-paren\n*/\n\nconst MethodFactory = require('./MethodFactory');\n\nconst defaults = {\n  name(options) {\n    return options.logger.name;\n  },\n\n  time() {\n    return new Date().toTimeString().split(' ')[0];\n  },\n\n  level(options) {\n    return `[${options.level}]`;\n  },\n\n  template: '{{time}} {{level}} '\n};\n\nclass PrefixFactory extends MethodFactory {\n  constructor(logger, options) {\n    super(logger);\n    this.options = Object.assign({}, defaults, options);\n  }\n\n  interpolate(level) {\n    return this.options.template.replace(/{{([^{}]*)}}/g, (stache, prop) => {\n      const fn = this.options[prop];\n\n      if (fn) {\n        return fn({\n          level,\n          logger: this.logger\n        });\n      }\n\n      return stache;\n    });\n  }\n\n  make(method) {\n    const og = super.make(method);\n    return (...args) => {\n      const [first] = args;\n      const output = this.interpolate(method);\n\n      if (typeof first === 'string') {\n        args[0] = output + first;\n      } else {\n        args.unshift(output);\n      }\n\n      og(...args);\n    };\n  }\n\n}\n\nmodule.exports = PrefixFactory;","map":{"version":3,"sources":["/home/lisa/VSProjects/react-pizza/react_pizza/node_modules/webpack-log/src/loglevel/PrefixFactory.js"],"names":["MethodFactory","require","defaults","name","options","logger","time","Date","toTimeString","split","level","template","PrefixFactory","constructor","Object","assign","interpolate","replace","stache","prop","fn","make","method","og","args","first","output","unshift","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;AACA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,IAAI,CAAEC,OAAF,EAAW;AACb,WAAOA,OAAO,CAACC,MAAR,CAAeF,IAAtB;AACD,GAHc;;AAIfG,EAAAA,IAAI,GAAI;AACN,WAAO,IAAIC,IAAJ,GAAWC,YAAX,GAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAP;AACD,GANc;;AAOfC,EAAAA,KAAK,CAAEN,OAAF,EAAW;AACd,WAAQ,IAAGA,OAAO,CAACM,KAAM,GAAzB;AACD,GATc;;AAUfC,EAAAA,QAAQ,EAAE;AAVK,CAAjB;;AAaA,MAAMC,aAAN,SAA4BZ,aAA5B,CAA0C;AACxCa,EAAAA,WAAW,CAACR,MAAD,EAASD,OAAT,EAAkB;AAC3B,UAAMC,MAAN;AAEA,SAAKD,OAAL,GAAeU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,QAAlB,EAA4BE,OAA5B,CAAf;AACD;;AAEDY,EAAAA,WAAW,CAACN,KAAD,EAAQ;AACjB,WAAO,KAAKN,OAAL,CAAaO,QAAb,CAAsBM,OAAtB,CAA8B,eAA9B,EAA+C,CAACC,MAAD,EAASC,IAAT,KAAkB;AACtE,YAAMC,EAAE,GAAG,KAAKhB,OAAL,CAAae,IAAb,CAAX;;AAEA,UAAIC,EAAJ,EAAQ;AACN,eAAOA,EAAE,CAAC;AAAEV,UAAAA,KAAF;AAASL,UAAAA,MAAM,EAAE,KAAKA;AAAtB,SAAD,CAAT;AACD;;AAED,aAAOa,MAAP;AACD,KARM,CAAP;AASD;;AAEDG,EAAAA,IAAI,CAACC,MAAD,EAAS;AACX,UAAMC,EAAE,GAAG,MAAMF,IAAN,CAAWC,MAAX,CAAX;AAEA,WAAO,CAAC,GAAGE,IAAJ,KAAa;AAClB,YAAM,CAACC,KAAD,IAAUD,IAAhB;AAEA,YAAME,MAAM,GAAG,KAAKV,WAAL,CAAiBM,MAAjB,CAAf;;AAEA,UAAI,OAAOG,KAAP,KAAiB,QAArB,EAA+B;AAC7BD,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,MAAM,GAAGD,KAAnB;AACD,OAFD,MAEO;AACLD,QAAAA,IAAI,CAACG,OAAL,CAAaD,MAAb;AACD;;AAEDH,MAAAA,EAAE,CAAC,GAAGC,IAAJ,CAAF;AACD,KAZD;AAaD;;AAnCuC;;AAsC1CI,MAAM,CAACC,OAAP,GAAiBjB,aAAjB","sourcesContent":["'use strict';\n\n/* eslint-disable\n  no-param-reassign,\n  space-before-function-paren\n*/\nconst MethodFactory = require('./MethodFactory');\n\nconst defaults = {\n  name (options) {\n    return options.logger.name;\n  },\n  time () {\n    return new Date().toTimeString().split(' ')[0];\n  },\n  level (options) {\n    return `[${options.level}]`;\n  },\n  template: '{{time}} {{level}} '\n};\n\nclass PrefixFactory extends MethodFactory {\n  constructor(logger, options) {\n    super(logger);\n\n    this.options = Object.assign({}, defaults, options);\n  }\n\n  interpolate(level) {\n    return this.options.template.replace(/{{([^{}]*)}}/g, (stache, prop) => {\n      const fn = this.options[prop];\n\n      if (fn) {\n        return fn({ level, logger: this.logger });\n      }\n\n      return stache;\n    });\n  }\n\n  make(method) {\n    const og = super.make(method);\n\n    return (...args) => {\n      const [first] = args;\n\n      const output = this.interpolate(method);\n\n      if (typeof first === 'string') {\n        args[0] = output + first;\n      } else {\n        args.unshift(output);\n      }\n\n      og(...args);\n    };\n  }\n}\n\nmodule.exports = PrefixFactory;\n"]},"metadata":{},"sourceType":"script"}